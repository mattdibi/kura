{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Eclipse Kura\u2122 Documentation The emergence of an Internet of Thing (IoT) service gateway model running modern software stacks, operating on the edge of an IoT deployment as an aggregator and controller, has opened up the possibility of enabling enterprise level technologies to IoT gateways. Advanced software frameworks, which abstract and isolate the developer from the complexity of the hardware and the networking sub-systems, re-define the development and re-usability of integrated hardware and software solutions. Eclipse Kura is an Eclipse IoT project that provides a platform for building IoT gateways. It is a smart application container that enables remote management of such gateways and provides a wide range of APIs for allowing you to write and deploy your own IoT application. Kura runs on top of the Java Virtual Machine (JVM) and leverages OSGi, a dynamic component system for Java, to simplify the process of writing reusable software building blocks. Kura APIs offer easy access to the underlying hardware including serial ports, GPS, watchdog, USB, GPIOs, I2C, etc. It also offer OSGI bundle to simplify the management of network configurations, the communication with IoT servers, and the remote management of the gateway. Kura components are designed as configurable OSGi Declarative Service exposing service API and raising events. While several Kura components are in pure Java, others are invoked through JNI and have a dependency on the Linux operating system. Kura comes with the following services: I/O Services Serial port access through javax.comm 2.0 API or OSGi I/O connection USB access and events through javax.usb, HID API, custom extensions Bluetooth access through javax.bluetooth or OSGi I/O connection Position Service for GPS information from an NMEA stream Clock Service for the synchronization of the system clock Kura API for GPIO/PWM/I2C/SPI access Data Services Store and forward functionality for the telemetry data collected by the gateway and published to remote servers. Policy-driven publishing system, which abstracts the application developer from the complexity of the network layer and the publishing protocol used. Eclipse Paho and its MQTT client provide the default messaging library used. Cloud Services Easy to use API layer for IoT application to communicate with a remote server. In addition to simple publish/subscribe, the Cloud Service API simplifies the implementation of more complex interaction flows like request/response or remote resource management. Allow for a single connection to a remote server to be shared across more than one application in the gateway providing the necessary topic partitioning. Configuration Service Leverage the OSGi specifications ConfigurationAdmin and MetaType to provide a snapshot service to import/export the configuration of all registered services in the container. Remote Management Allow for remote management of the IoT applications installed in Kura including their deployment, upgrade and configuration management. The Remote Management service relies on the Configuration Service and the Cloud Service. Networking Provide API for introspects and configure the network interfaces available in the gateway like Ethernet, Wifi, and Cellular modems. Watchdog Service Register critical components to the Watchdog Service, which will force a system reset through the hardware watchdog when a problem is detected. Web administration interface Offer a web-based management console running within the Kura container to manage the gateway. Drivers and Assets A unified model is introduced to simplify the communication with the devices attached to the gateway. The Driver encapsulates the communication protocol and its configuration parameters, while the Asset, which is generic across Drivers, models the information data channels towards the device. When an Asset is created, a Mirror of the device is automatically available for on-demand read and writes via Java APIs or via Cloud through remote messages. Wires Offers modular and visual data flow programming tool to define data collection and processing pipelines at the edge by simply selecting components from a palette and wiring them together. This way users can, for example, configure an Asset, periodically acquire data from its channels, store them in the gateway, filter or aggregate them using powerful SQL queries, and send the results to the Cloud. The Eclipse Kura Marketplace is a repository from which additional Wires components can be installed into your Kura runtime with a simple drag-and-drop.","title":"Home"},{"location":"#welcome-to-the-eclipse-kuratm-documentation","text":"The emergence of an Internet of Thing (IoT) service gateway model running modern software stacks, operating on the edge of an IoT deployment as an aggregator and controller, has opened up the possibility of enabling enterprise level technologies to IoT gateways. Advanced software frameworks, which abstract and isolate the developer from the complexity of the hardware and the networking sub-systems, re-define the development and re-usability of integrated hardware and software solutions. Eclipse Kura is an Eclipse IoT project that provides a platform for building IoT gateways. It is a smart application container that enables remote management of such gateways and provides a wide range of APIs for allowing you to write and deploy your own IoT application. Kura runs on top of the Java Virtual Machine (JVM) and leverages OSGi, a dynamic component system for Java, to simplify the process of writing reusable software building blocks. Kura APIs offer easy access to the underlying hardware including serial ports, GPS, watchdog, USB, GPIOs, I2C, etc. It also offer OSGI bundle to simplify the management of network configurations, the communication with IoT servers, and the remote management of the gateway. Kura components are designed as configurable OSGi Declarative Service exposing service API and raising events. While several Kura components are in pure Java, others are invoked through JNI and have a dependency on the Linux operating system. Kura comes with the following services: I/O Services Serial port access through javax.comm 2.0 API or OSGi I/O connection USB access and events through javax.usb, HID API, custom extensions Bluetooth access through javax.bluetooth or OSGi I/O connection Position Service for GPS information from an NMEA stream Clock Service for the synchronization of the system clock Kura API for GPIO/PWM/I2C/SPI access Data Services Store and forward functionality for the telemetry data collected by the gateway and published to remote servers. Policy-driven publishing system, which abstracts the application developer from the complexity of the network layer and the publishing protocol used. Eclipse Paho and its MQTT client provide the default messaging library used. Cloud Services Easy to use API layer for IoT application to communicate with a remote server. In addition to simple publish/subscribe, the Cloud Service API simplifies the implementation of more complex interaction flows like request/response or remote resource management. Allow for a single connection to a remote server to be shared across more than one application in the gateway providing the necessary topic partitioning. Configuration Service Leverage the OSGi specifications ConfigurationAdmin and MetaType to provide a snapshot service to import/export the configuration of all registered services in the container. Remote Management Allow for remote management of the IoT applications installed in Kura including their deployment, upgrade and configuration management. The Remote Management service relies on the Configuration Service and the Cloud Service. Networking Provide API for introspects and configure the network interfaces available in the gateway like Ethernet, Wifi, and Cellular modems. Watchdog Service Register critical components to the Watchdog Service, which will force a system reset through the hardware watchdog when a problem is detected. Web administration interface Offer a web-based management console running within the Kura container to manage the gateway. Drivers and Assets A unified model is introduced to simplify the communication with the devices attached to the gateway. The Driver encapsulates the communication protocol and its configuration parameters, while the Asset, which is generic across Drivers, models the information data channels towards the device. When an Asset is created, a Mirror of the device is automatically available for on-demand read and writes via Java APIs or via Cloud through remote messages. Wires Offers modular and visual data flow programming tool to define data collection and processing pipelines at the edge by simply selecting components from a palette and wiring them together. This way users can, for example, configure an Asset, periodically acquire data from its channels, store them in the gateway, filter or aggregate them using powerful SQL queries, and send the results to the Cloud. The Eclipse Kura Marketplace is a repository from which additional Wires components can be installed into your Kura runtime with a simple drag-and-drop.","title":"Welcome to the Eclipse Kura\u2122 Documentation"},{"location":"gateway-configuration/cellular-configuration/","text":"Cellular Configuration If it is not configured, the cellular interface is presented on the interface list either by modem USB address, or if serial modem is used, by modem name. This 'fake' interface name is replaced by 'proper' interface name (e.g., ppp0) when the first modem configuration is submitted. The cellular interface should be configured by first enabling it in the TCP/IP tab, and then setting the Cellular tab. Note that the cellular interface can only be set as WAN using DHCP . The cellular interface configuration options are described below. Cellular Configuration The Cellular tab contains the following configuration parameters: Model : specifies the modem model. Network Technology : describes the network technology used by this modem. HSDPA EVDO Modem Identifier : provides a unique name for this modem. Interface # : provides a unique number for the modem interface (e.g., an interface # of 0 would name the modem interface ppp0). Dial String : instructs how the modem should attempt to connect. Typical dial strings are as follows: HSPA modem: atd*99***1# EVDO/CDMA modem: atd#777 APN : defines the modem access point name (HSPA modems only). Auth Type : specifies the authentication type (HSPA modems only). None Auto CHAP PAP Username : supplies the username; disabled if no authentication method is specified. Password : supplies the password; disabled if no authentication method is specified. Modem Reset Timeout : sets the modem reset timeout in minutes. If set to a non-zero value, the modem is reset after n consecutive minutes of unsuccessful connection attempts. If set to zero, the modem keeps trying to establish a PPP connection without resetting. The default value is 5 minutes. Reopen Connection on Termination : sets the persist option of the PPP daemon that specifies if PPP daemon should exit after connection is terminated. Note that the maxfail option still has an effect on persistent connections. Connection Attempts : sets the maxfail option of the PPP daemon that limits the number of consecutive failed PPP connection attempts. The default value is 5 connection attempts. A value of zero means no limit. The PPP daemon terminates after the specified number of failed PPP connection attempts and restarts by the ModemMonitor thread. Disconnect if Idle : sets the idle option of the PPP daemon, which terminates the PPP connection if the link is idle for a specified number of seconds. The default value is 95 seconds. To disable this option, set it to zero. Active Filter : sets the active-filter option of the PPP daemon. This option specifies a packet filter (filter-expression) to be applied to data packets in order to determine which packets are regarded as link activity, and thereby, reset the idle timer. The filter-expression syntax is as described for tcpdump(1); however, qualifiers that do not apply to a PPP link, such as ether and arp , are not permitted. The default value is inbound . To disable the active-filter option, leave it blank. LCP Echo Interval : sets the lcp-echo-interval option of the PPP daemon. If set to a positive number, the modem sends LCP echo request to the peer at the specified number of seconds. To disable this option, set it to zero. This option may be used with the lcp-echo-failure option to detect that the peer is no longer connected. LCP Echo Failure : sets the lcp-echo-failure option of the PPP daemon. If set to a positive number, the modem presumes the peer to be dead if a specified number of LCP echo-requests are sent without receiving a valid LCP echo-reply. To disable this option, set it to zero. Enable GPS : enables GPS with the following conditions: One modem port will be dedicated to NMEA data stream. This port may not be used to send AT commands to the modem. PositionService should be enabled. Serial settings of PositionService should not be changed; it will be redirected to the modem GPS port automatically. Cellular Linux Configuration This section describes the changes applied by Kura at the Linux networking configuration. Please read the following note before proceeding with manual changes of the Linux networking configuration. Warning It is NOT recommended performing manual editing of the Linux networking configuration files when the gateway configuration is being managed through Kura. While Linux may correctly accept manual changes, Kura may not be able to interpret the new configuration resulting in an inconsistent state. When the cellular configuration is submitted, Kura generates peer and chat scripts used by the PPP daemon to establish a PPP connection. Examples of these scripts for HSPA and EVDO modems are shown below. Example Peer Script for HSPA Modem 921600 unit 0 logfile /var/log/HE910-D_2-1.5 debug connect 'chat:v:f /etc/ppp/scripts/chat_HE910-D_2-1.5' disconnect 'chat:v:f /etc/ppp/scripts/disconnect_HE910-D_2-1.5' modem lock noauth noipdefault defaultroute usepeerdns noproxyarp novj novjccomp nobsdcomp nodeflate nomagic idle 95 active-filter 'inbound' persist holdoff 1 maxfail 5 connect-delay 1000 Example Chat Script for HSPA Modem ABORT \"BUSY\" ABORT \"VOICE\" ABORT \"NO CARRIER\" ABORT \"NO DIALTONE\" ABORT \"NO DIAL TONE\" ABORT \"ERROR\" \"\" \"+++ath\" OK \"AT\" OK AT+CGDCONT = 1 , \"IP\" , \"c1.korem2m.com\" OK \"\\d\\d\\d\" \"\" \"atd-99---1#\" CONNECT \"\\c\" Example Peer Script for EVDO Modem 921600 unit 0 logfile /var/log/DE910-DUAL_1-1.5 debug connect 'chat:v:f /etc/ppp/scripts/chat_DE910-DUAL_1-1.5' disconnect 'chat:v:f /etc/ppp/scripts/disconnect_DE910-DUAL_1-1.5' crtscts lock noauth defaultroute usepeerdns idle 95 active-filter 'inbound' persist holdoff 1 maxfail 5 connect-delay 10000 Example Chat Script for EVDO Modem ABORT \"BUSY\" ABORT \"VOICE\" ABORT \"NO CARRIER\" ABORT \"NO DIALTONE\" ABORT \"NO DIAL TONE\" ABORT \"ERROR\" \"\" \"+++ath\" OK \"AT\" OK \"ATE1V1&F&D2&C1&C2S0=0\" OK \"ATE1V1\" OK \"ATS7=60\" OK \"\\d\\d\\d\" \"\" \"atd#777\" CONNECT \"\\c\"","title":"Cellular Configuration"},{"location":"gateway-configuration/cellular-configuration/#cellular-configuration","text":"If it is not configured, the cellular interface is presented on the interface list either by modem USB address, or if serial modem is used, by modem name. This 'fake' interface name is replaced by 'proper' interface name (e.g., ppp0) when the first modem configuration is submitted. The cellular interface should be configured by first enabling it in the TCP/IP tab, and then setting the Cellular tab. Note that the cellular interface can only be set as WAN using DHCP . The cellular interface configuration options are described below.","title":"Cellular Configuration"},{"location":"gateway-configuration/cellular-configuration/#cellular-configuration_1","text":"The Cellular tab contains the following configuration parameters: Model : specifies the modem model. Network Technology : describes the network technology used by this modem. HSDPA EVDO Modem Identifier : provides a unique name for this modem. Interface # : provides a unique number for the modem interface (e.g., an interface # of 0 would name the modem interface ppp0). Dial String : instructs how the modem should attempt to connect. Typical dial strings are as follows: HSPA modem: atd*99***1# EVDO/CDMA modem: atd#777 APN : defines the modem access point name (HSPA modems only). Auth Type : specifies the authentication type (HSPA modems only). None Auto CHAP PAP Username : supplies the username; disabled if no authentication method is specified. Password : supplies the password; disabled if no authentication method is specified. Modem Reset Timeout : sets the modem reset timeout in minutes. If set to a non-zero value, the modem is reset after n consecutive minutes of unsuccessful connection attempts. If set to zero, the modem keeps trying to establish a PPP connection without resetting. The default value is 5 minutes. Reopen Connection on Termination : sets the persist option of the PPP daemon that specifies if PPP daemon should exit after connection is terminated. Note that the maxfail option still has an effect on persistent connections. Connection Attempts : sets the maxfail option of the PPP daemon that limits the number of consecutive failed PPP connection attempts. The default value is 5 connection attempts. A value of zero means no limit. The PPP daemon terminates after the specified number of failed PPP connection attempts and restarts by the ModemMonitor thread. Disconnect if Idle : sets the idle option of the PPP daemon, which terminates the PPP connection if the link is idle for a specified number of seconds. The default value is 95 seconds. To disable this option, set it to zero. Active Filter : sets the active-filter option of the PPP daemon. This option specifies a packet filter (filter-expression) to be applied to data packets in order to determine which packets are regarded as link activity, and thereby, reset the idle timer. The filter-expression syntax is as described for tcpdump(1); however, qualifiers that do not apply to a PPP link, such as ether and arp , are not permitted. The default value is inbound . To disable the active-filter option, leave it blank. LCP Echo Interval : sets the lcp-echo-interval option of the PPP daemon. If set to a positive number, the modem sends LCP echo request to the peer at the specified number of seconds. To disable this option, set it to zero. This option may be used with the lcp-echo-failure option to detect that the peer is no longer connected. LCP Echo Failure : sets the lcp-echo-failure option of the PPP daemon. If set to a positive number, the modem presumes the peer to be dead if a specified number of LCP echo-requests are sent without receiving a valid LCP echo-reply. To disable this option, set it to zero. Enable GPS : enables GPS with the following conditions: One modem port will be dedicated to NMEA data stream. This port may not be used to send AT commands to the modem. PositionService should be enabled. Serial settings of PositionService should not be changed; it will be redirected to the modem GPS port automatically.","title":"Cellular Configuration"},{"location":"gateway-configuration/cellular-configuration/#cellular-linux-configuration","text":"This section describes the changes applied by Kura at the Linux networking configuration. Please read the following note before proceeding with manual changes of the Linux networking configuration. Warning It is NOT recommended performing manual editing of the Linux networking configuration files when the gateway configuration is being managed through Kura. While Linux may correctly accept manual changes, Kura may not be able to interpret the new configuration resulting in an inconsistent state. When the cellular configuration is submitted, Kura generates peer and chat scripts used by the PPP daemon to establish a PPP connection. Examples of these scripts for HSPA and EVDO modems are shown below.","title":"Cellular Linux Configuration"},{"location":"gateway-configuration/cellular-configuration/#example-peer-script-for-hspa-modem","text":"921600 unit 0 logfile /var/log/HE910-D_2-1.5 debug connect 'chat:v:f /etc/ppp/scripts/chat_HE910-D_2-1.5' disconnect 'chat:v:f /etc/ppp/scripts/disconnect_HE910-D_2-1.5' modem lock noauth noipdefault defaultroute usepeerdns noproxyarp novj novjccomp nobsdcomp nodeflate nomagic idle 95 active-filter 'inbound' persist holdoff 1 maxfail 5 connect-delay 1000","title":"Example Peer Script for HSPA Modem"},{"location":"gateway-configuration/cellular-configuration/#example-chat-script-for-hspa-modem","text":"ABORT \"BUSY\" ABORT \"VOICE\" ABORT \"NO CARRIER\" ABORT \"NO DIALTONE\" ABORT \"NO DIAL TONE\" ABORT \"ERROR\" \"\" \"+++ath\" OK \"AT\" OK AT+CGDCONT = 1 , \"IP\" , \"c1.korem2m.com\" OK \"\\d\\d\\d\" \"\" \"atd-99---1#\" CONNECT \"\\c\"","title":"Example Chat Script for HSPA Modem"},{"location":"gateway-configuration/cellular-configuration/#example-peer-script-for-evdo-modem","text":"921600 unit 0 logfile /var/log/DE910-DUAL_1-1.5 debug connect 'chat:v:f /etc/ppp/scripts/chat_DE910-DUAL_1-1.5' disconnect 'chat:v:f /etc/ppp/scripts/disconnect_DE910-DUAL_1-1.5' crtscts lock noauth defaultroute usepeerdns idle 95 active-filter 'inbound' persist holdoff 1 maxfail 5 connect-delay 10000","title":"Example Peer Script for EVDO Modem"},{"location":"gateway-configuration/cellular-configuration/#example-chat-script-for-evdo-modem","text":"ABORT \"BUSY\" ABORT \"VOICE\" ABORT \"NO CARRIER\" ABORT \"NO DIALTONE\" ABORT \"NO DIAL TONE\" ABORT \"ERROR\" \"\" \"+++ath\" OK \"AT\" OK \"ATE1V1&F&D2&C1&C2S0=0\" OK \"ATE1V1\" OK \"ATS7=60\" OK \"\\d\\d\\d\" \"\" \"atd#777\" CONNECT \"\\c\"","title":"Example Chat Script for EVDO Modem"},{"location":"gateway-configuration/cloud-connections/","text":"Cloud Connections The Cloud Connections section of the Kura Gateway Administration Console allows to create and manage cloud connections. By default, Kura starts with a single cloud connection, as depicted in the following image: The cloud services page allows to: - create a new cloud connection; - delete an existing cloud connection; - connect a selected cloud stack to the configured cloud platform; - disconnect the selected cloud stack from the connected cloud platform; - refresh the existing cloud connections. When clicking on the New button, a dialog is displayed as depicted in the image below: The user can select one of the existing cloud connection factories and give it a name (depending on the implementation, a name format can be suggested or forced). Selecting a created Cloud Connection it is possible to associate a new publisher/subscriber by clicking the New Pub/Sub button. As for the connection creation case, the user can select one of the existing publisher/subscriber factories and give it a name.","title":"Cloud Connections"},{"location":"gateway-configuration/cloud-connections/#cloud-connections","text":"The Cloud Connections section of the Kura Gateway Administration Console allows to create and manage cloud connections. By default, Kura starts with a single cloud connection, as depicted in the following image: The cloud services page allows to: - create a new cloud connection; - delete an existing cloud connection; - connect a selected cloud stack to the configured cloud platform; - disconnect the selected cloud stack from the connected cloud platform; - refresh the existing cloud connections. When clicking on the New button, a dialog is displayed as depicted in the image below: The user can select one of the existing cloud connection factories and give it a name (depending on the implementation, a name format can be suggested or forced). Selecting a created Cloud Connection it is possible to associate a new publisher/subscriber by clicking the New Pub/Sub button. As for the connection creation case, the user can select one of the existing publisher/subscriber factories and give it a name.","title":"Cloud Connections"},{"location":"gateway-configuration/cloud-service-configuration/","text":"Cloud Service Configuration The CloudService provides an easy-to-use API layer for the M2M application to communicate with a remote server. It operates as a decorator for the DataService , providing add-on features over the management of the DataTransport layer. In addition to simple publish/subscribe, the Cloud Connection API simplifies the implementation of more complex interaction flows like request/response or remote resource management. The Cloud Connection abstracts the developers from the complexity of the transport protocol and payload format used in the communication. The Cloud Connection allows a single connection to a remote server to be shared across more than one application in the gateway, providing the necessary topic partitioning. Its functions include: Adds application topic prefixes to allow a single remote server connection to be shared across applications. Defines a payload data model and provides default encoding/decoding serializers. Publishes life-cycle messages when the device and applications start and stop. To use this service, select the CloudService option located in the Cloud Services area as shown in the screen capture below. The CloudService provides the following configuration parameters: device.display-name : defines the device display name given by the system. (Required field). device.custom-name : defines the custom device display name if the device.display-name parameter is set to \"Custom\". topic.control-prefix : defines the topic prefix used for system and device management messages. encode.gzip : defines if the message payloads are sent compressed. republish.mqtt.birth.cert.on.gps.lock : when set to true, forces a republish of the MQTT Birth Certificate when a GPS correct position lock is received. The device is then registered with its real coordinates. (Required field). republish.mqtt.birth.cert.on.modem.detect : when set to true, forces a republish of the MQTT Birth Certificate when the service receives a modem detection event. (Required field). enable.default.subscriptions : manages the default subscriptions to the gateway management MQTT topics. When disabled, the gateway will not be remotely manageable. birth.cert.policy : specifies the birth cert policy to be used. The possible selectable options are: Disable publishing : No birth message will be sent Publish birth on connect : Publishes a birth message at the first connection event Publish birth on connect and reconnect : Publishes a birth message at connection and reconnection events. payload.encoding : specifies the encoding for the messages sent by the specific CloudService instance. Kura Protobuf - when this option is selected, the Kura Protobuf encoding will be used Simple JSON - the simple JSON encoding will be used instead. More information is available here . An example below. { \"sentOn\" : 1491298822 , \"position\" : { \"latitude\" : 45.234 , \"longitude\" : -7.3456 , \"altitude\" : 1.0 , \"heading\" : 5.4 , \"precision\" : 0.1 , \"speed\" : 23.5 , \"timestamp\" : 1191292288 , \"satellites\" : 3 , \"status\" : 2 }, \"metrics\" : { \"code\" : \"A23D44567Q\" , \"distance\" : 0.26456E+4 , \"temperature\" : 27.5 , \"count\" : 12354 , \"timestamp\" : 23412334545 , \"enable\" : true , \"rawBuffer\" : \"cGlwcG8gcGx1dG8gcGFwZXJpbm8=\" }, \"body\" : \"UGlwcG8sIHBsdXRvLCBwYXBlcmlubywgcXVpLCBxdW8gZSBxdWEu\" }","title":"Cloud Service Configuration"},{"location":"gateway-configuration/cloud-service-configuration/#cloud-service-configuration","text":"The CloudService provides an easy-to-use API layer for the M2M application to communicate with a remote server. It operates as a decorator for the DataService , providing add-on features over the management of the DataTransport layer. In addition to simple publish/subscribe, the Cloud Connection API simplifies the implementation of more complex interaction flows like request/response or remote resource management. The Cloud Connection abstracts the developers from the complexity of the transport protocol and payload format used in the communication. The Cloud Connection allows a single connection to a remote server to be shared across more than one application in the gateway, providing the necessary topic partitioning. Its functions include: Adds application topic prefixes to allow a single remote server connection to be shared across applications. Defines a payload data model and provides default encoding/decoding serializers. Publishes life-cycle messages when the device and applications start and stop. To use this service, select the CloudService option located in the Cloud Services area as shown in the screen capture below. The CloudService provides the following configuration parameters: device.display-name : defines the device display name given by the system. (Required field). device.custom-name : defines the custom device display name if the device.display-name parameter is set to \"Custom\". topic.control-prefix : defines the topic prefix used for system and device management messages. encode.gzip : defines if the message payloads are sent compressed. republish.mqtt.birth.cert.on.gps.lock : when set to true, forces a republish of the MQTT Birth Certificate when a GPS correct position lock is received. The device is then registered with its real coordinates. (Required field). republish.mqtt.birth.cert.on.modem.detect : when set to true, forces a republish of the MQTT Birth Certificate when the service receives a modem detection event. (Required field). enable.default.subscriptions : manages the default subscriptions to the gateway management MQTT topics. When disabled, the gateway will not be remotely manageable. birth.cert.policy : specifies the birth cert policy to be used. The possible selectable options are: Disable publishing : No birth message will be sent Publish birth on connect : Publishes a birth message at the first connection event Publish birth on connect and reconnect : Publishes a birth message at connection and reconnection events. payload.encoding : specifies the encoding for the messages sent by the specific CloudService instance. Kura Protobuf - when this option is selected, the Kura Protobuf encoding will be used Simple JSON - the simple JSON encoding will be used instead. More information is available here . An example below. { \"sentOn\" : 1491298822 , \"position\" : { \"latitude\" : 45.234 , \"longitude\" : -7.3456 , \"altitude\" : 1.0 , \"heading\" : 5.4 , \"precision\" : 0.1 , \"speed\" : 23.5 , \"timestamp\" : 1191292288 , \"satellites\" : 3 , \"status\" : 2 }, \"metrics\" : { \"code\" : \"A23D44567Q\" , \"distance\" : 0.26456E+4 , \"temperature\" : 27.5 , \"count\" : 12354 , \"timestamp\" : 23412334545 , \"enable\" : true , \"rawBuffer\" : \"cGlwcG8gcGx1dG8gcGFwZXJpbm8=\" }, \"body\" : \"UGlwcG8sIHBsdXRvLCBwYXBlcmlubywgcXVpLCBxdW8gZSBxdWEu\" }","title":"Cloud Service Configuration"},{"location":"gateway-configuration/data-service-configuration/","text":"Data Service Configuration The DataService provides the ability to connect to a remote broker, publish messages, subscribe to topics, receive messages on the subscribed topics, and disconnect from the remote message broker. The DataService delegates to the MqttDataTransport service the implementation of the transport protocol that is used to interact with the remote server. The DataService also adds the capability of storing published messages in a persistent store function and sending them over the wire at a later time. The purpose of this feature is to relieve service users from implementing their own persistent store. Service users may publish messages independently on the DataService connection status. In order to overcome the potential latencies introduced by buffering messages, the DataService allows a priority level to be assigned to\u200b each published message. Depending on the store configuration, there are certain guarantees that stored messages are not lost due to sudden crashes or power outages. To use this service, select the DataService option located in the Cloud Connections area as shown in the screen capture below. The DataService offers methods and configuration options to manage the connection to the remote server including the following (all required) parameters described below. connect.auto-on-startup : when set to true, the service tries to auto-connect to the remote server on start-up and restore the connection every time the device is disconnected. These attempts are made at the frequency defined in the connect.retry-interval parameter until the connection is established. connect.retry-interval : specifies the connection retry frequency after a disconnection. enable.recovery.on.connection.failure : when enabled, activates the recovery feature on connection failure: if the device is not able to connect to a remote cloud platform, the service will wait for a specified amount of connection retries. If the recovery fails, the device will be rebooted. Being based on the Watchdog service, it needs to be activated as well. connection.recovery.max.failures : related to the previous parameter. It specifies the number of failures before a reboot is requested. disconnect.quiesce-timeout : allows the delivery of in-flight messages to be completed before disconnecting from the broker when a disconnection from the broker is being forced. store.db.service.pid : The Kura Service PID of the database instance to be used. The PID of the default instance is org.eclipse.kura.db.H2DbService. store.housekeeper-interval : defines the interval in seconds used to run the Data Store housekeeper task. store.purge-age : defines the age in seconds of completed messages (either published with QoS = 0 or confirmed with QoS > 0) after which they are deleted (minimum 5). store.capacity : defines the maximum number of messages persisted in the Data Store. in-flight-messages.republish-on-new-session : it specifies whether to republish in-flight messages on a new MQTT session. in-flight-messages.max-number : it specifies the maximum number of in-flight messages. in-flight-messages.congestion-timeout : timeouts the in-flight messages congestion condition. The service will force a disconnect attempting to reconnect. enable.rate.limit : Enables the token bucket message rate limiting. rate.limit.average : The average message publishing rate. It is intended as the number of messages per unit of time. Danger The maximum allowed message rate is 1 message per millisecond , so the following limitations are applied: 86400000 per DAY 3600000 per HOUR 60000 messages per MINUTE 1000 messages per SECOND rate.limit.time.unit : The time unit for the rate.limit.average. rate.limit.burst.size : The token bucket burst size. Connection Monitors The DataService offers methods and configuration options to monitor the connection to the remote server and, eventually, cause a system reboot to recover from transient network problems. This feature, if enabled, leverages the watchdog service and reboots the gateway if the maximum number of configured connection attempts has been made. A reboot is not requested if the connection to the remote broker succeeds but an authentication error , an invalid client id or an authorization error is thrown by the remote cloud platform and causes a connection drop. The image below shows the parameters that need to be tuned in order to enable this connection monitor feature. To configure this functionality, the System Administrator needs to specify the following configuration elements: enable.recovery.on.connection.failure : when enabled, activates the recovery feature on connection failure: if the device is not able to connect to a remote cloud platform, the service will wait for a specified amount of connection retries. If the recovery fails, the device will be rebooted. Being based on the Watchdog service, it needs to be activated as well. connection.recovery.max.failures : related to the previous parameter. It specifies the number of failures before a reboot is requested. !!! warning To be fully working, this feature needs the enabling of the Watchdog Service. Message Publishing Backoff Delay In order to have a finer control on the data flow, when a device reconnects to a remote cloud platform, Kura integrates into the Data Service a Backoff delay feature that limits the rate of messages sent. This feature, enabled by default, integrates the Token Bucket concept to limit the bursts of messages sent to a remote cloud platform. In the image below, the parameters that need to be tuned, in the Data Service, to take advantage of this feature: enable.rate.limit : Enables the token bucket message rate limiting. rate.limit.average : The average message publishing rate. It is intended as the number of messages per unit of time. rate.limit.time.unit : The time unit for the rate.limit.average. rate.limit.burst.size : The token bucket burst size. The default setup limits the data flow to 1 message per second with a bucket size of 1 token . Warning This feature needs to be properly tuned by the System Administrator in order to prevent delays in the remote cloud platform due to messages stacked at the edge. If not sure of the number of messages that your gateways will try to push to the remote platform, we suggest to disable this feature.","title":"Data Service Configuration"},{"location":"gateway-configuration/data-service-configuration/#data-service-configuration","text":"The DataService provides the ability to connect to a remote broker, publish messages, subscribe to topics, receive messages on the subscribed topics, and disconnect from the remote message broker. The DataService delegates to the MqttDataTransport service the implementation of the transport protocol that is used to interact with the remote server. The DataService also adds the capability of storing published messages in a persistent store function and sending them over the wire at a later time. The purpose of this feature is to relieve service users from implementing their own persistent store. Service users may publish messages independently on the DataService connection status. In order to overcome the potential latencies introduced by buffering messages, the DataService allows a priority level to be assigned to\u200b each published message. Depending on the store configuration, there are certain guarantees that stored messages are not lost due to sudden crashes or power outages. To use this service, select the DataService option located in the Cloud Connections area as shown in the screen capture below. The DataService offers methods and configuration options to manage the connection to the remote server including the following (all required) parameters described below. connect.auto-on-startup : when set to true, the service tries to auto-connect to the remote server on start-up and restore the connection every time the device is disconnected. These attempts are made at the frequency defined in the connect.retry-interval parameter until the connection is established. connect.retry-interval : specifies the connection retry frequency after a disconnection. enable.recovery.on.connection.failure : when enabled, activates the recovery feature on connection failure: if the device is not able to connect to a remote cloud platform, the service will wait for a specified amount of connection retries. If the recovery fails, the device will be rebooted. Being based on the Watchdog service, it needs to be activated as well. connection.recovery.max.failures : related to the previous parameter. It specifies the number of failures before a reboot is requested. disconnect.quiesce-timeout : allows the delivery of in-flight messages to be completed before disconnecting from the broker when a disconnection from the broker is being forced. store.db.service.pid : The Kura Service PID of the database instance to be used. The PID of the default instance is org.eclipse.kura.db.H2DbService. store.housekeeper-interval : defines the interval in seconds used to run the Data Store housekeeper task. store.purge-age : defines the age in seconds of completed messages (either published with QoS = 0 or confirmed with QoS > 0) after which they are deleted (minimum 5). store.capacity : defines the maximum number of messages persisted in the Data Store. in-flight-messages.republish-on-new-session : it specifies whether to republish in-flight messages on a new MQTT session. in-flight-messages.max-number : it specifies the maximum number of in-flight messages. in-flight-messages.congestion-timeout : timeouts the in-flight messages congestion condition. The service will force a disconnect attempting to reconnect. enable.rate.limit : Enables the token bucket message rate limiting. rate.limit.average : The average message publishing rate. It is intended as the number of messages per unit of time. Danger The maximum allowed message rate is 1 message per millisecond , so the following limitations are applied: 86400000 per DAY 3600000 per HOUR 60000 messages per MINUTE 1000 messages per SECOND rate.limit.time.unit : The time unit for the rate.limit.average. rate.limit.burst.size : The token bucket burst size.","title":"Data Service Configuration"},{"location":"gateway-configuration/data-service-configuration/#connection-monitors","text":"The DataService offers methods and configuration options to monitor the connection to the remote server and, eventually, cause a system reboot to recover from transient network problems. This feature, if enabled, leverages the watchdog service and reboots the gateway if the maximum number of configured connection attempts has been made. A reboot is not requested if the connection to the remote broker succeeds but an authentication error , an invalid client id or an authorization error is thrown by the remote cloud platform and causes a connection drop. The image below shows the parameters that need to be tuned in order to enable this connection monitor feature. To configure this functionality, the System Administrator needs to specify the following configuration elements: enable.recovery.on.connection.failure : when enabled, activates the recovery feature on connection failure: if the device is not able to connect to a remote cloud platform, the service will wait for a specified amount of connection retries. If the recovery fails, the device will be rebooted. Being based on the Watchdog service, it needs to be activated as well. connection.recovery.max.failures : related to the previous parameter. It specifies the number of failures before a reboot is requested. !!! warning To be fully working, this feature needs the enabling of the Watchdog Service.","title":"Connection Monitors"},{"location":"gateway-configuration/data-service-configuration/#message-publishing-backoff-delay","text":"In order to have a finer control on the data flow, when a device reconnects to a remote cloud platform, Kura integrates into the Data Service a Backoff delay feature that limits the rate of messages sent. This feature, enabled by default, integrates the Token Bucket concept to limit the bursts of messages sent to a remote cloud platform. In the image below, the parameters that need to be tuned, in the Data Service, to take advantage of this feature: enable.rate.limit : Enables the token bucket message rate limiting. rate.limit.average : The average message publishing rate. It is intended as the number of messages per unit of time. rate.limit.time.unit : The time unit for the rate.limit.average. rate.limit.burst.size : The token bucket burst size. The default setup limits the data flow to 1 message per second with a bucket size of 1 token . Warning This feature needs to be properly tuned by the System Administrator in order to prevent delays in the remote cloud platform due to messages stacked at the edge. If not sure of the number of messages that your gateways will try to push to the remote platform, we suggest to disable this feature.","title":"Message Publishing Backoff Delay"},{"location":"gateway-configuration/data-transport-service-configuration/","text":"Data Transport Service Configuration The DataTransport service provides the ability to connect to a remote broker, publish messages, subscribe to topics, receive messages on the subscribed topics, and disconnect from the remote message broker. To use this service, select the MqttDataTransport option located in the Cloud Connections area as shown in the screen captures below. The MqttDataTransport service provides the following configuration parameters: broker-url : defines the URL of the MQTT broker to connect to. For the Everyware Cloud sandbox, this address is either mqtt://broker-sbx.everyware.io:1883/ or mqtts://broker-sbx.everyware.io:8883/ for an encrypted connection. (Required field). topic.context.account-name : defines the name of the account to which the device belongs. username and password : define the username and password that have been assigned to the device by the account administrator (generally username is account-name_broker). (Required field). client-id : defines the identifier of the MQTT client representing the device when connecting to the MQTT broker. If left empty, it is automatically determined by the client software as the MAC address of the main network interface (in general numbers and uppercase letters without ':'). This identifier has to be unique within your account. keep-alive : defines the \"keep alive\" interval measured in seconds. It specifies the maximum amount of time that should pass without communication between the client and the server. The client will ensure that at least one message travels across the network within each keep alive period. In the absence of a data-related message during this time period, the client will send a very small MQTT \"ping\" message that the server will acknowledge. The keep alive interval enables the client to detect when the server is no longer available without having to wait for the long TCP/IP timeout. (Required field). Warning The keep-alive interval may \"conflict\" with the TCP idle timeout set at the TCP/IP level. As a best practice the TCP idle timeout should be at least 1,5 times the keep-alive time interval. If the TCP idle timeout is less or equal the keep-alive, the MQTT connection may be dropped due to the TCP idle timeout expiration. timeout : sets the timeout used for all interactions with the MQTT broker. (Required field). clean-session : controls the behavior of both the client and the server at the time of connection and disconnection. When this parameter is set to true, the state information is discarded at connection and disconnection; when set to false, the state information is maintained. (Required field). lwt parameters: define the MQTT \"Last Will and Testament\" (LWT) settings for the client. In the event that the client unexpectedly loses its connection to the server, the server publishes the LWT message (lwt.payload) to the LWT topic on behalf of the client. This allows other clients (subscribed to the LWT topic) to be made aware that the client has disconnected. LWT parameters that may be configured include: lwt.topic lwt.payload lwt.qos lwt.retain in-flight.persistence : defines the storage type where in-flight messages are persisted across reconnections. They may be stored in memory, or in a file on the disk. (Required field). protocol-version : defines the MQTT Protocol version to be used. This value may be 3.1 or 3.1.1. SSL parameters: define the SSL specific settings for the client. SSL parameters that can be configured include: ssl.default.protocol ssl.hostname.verification ssl.default.cipherSuites ssl.certificate.alias","title":"Data Transport Service Configuration"},{"location":"gateway-configuration/data-transport-service-configuration/#data-transport-service-configuration","text":"The DataTransport service provides the ability to connect to a remote broker, publish messages, subscribe to topics, receive messages on the subscribed topics, and disconnect from the remote message broker. To use this service, select the MqttDataTransport option located in the Cloud Connections area as shown in the screen captures below. The MqttDataTransport service provides the following configuration parameters: broker-url : defines the URL of the MQTT broker to connect to. For the Everyware Cloud sandbox, this address is either mqtt://broker-sbx.everyware.io:1883/ or mqtts://broker-sbx.everyware.io:8883/ for an encrypted connection. (Required field). topic.context.account-name : defines the name of the account to which the device belongs. username and password : define the username and password that have been assigned to the device by the account administrator (generally username is account-name_broker). (Required field). client-id : defines the identifier of the MQTT client representing the device when connecting to the MQTT broker. If left empty, it is automatically determined by the client software as the MAC address of the main network interface (in general numbers and uppercase letters without ':'). This identifier has to be unique within your account. keep-alive : defines the \"keep alive\" interval measured in seconds. It specifies the maximum amount of time that should pass without communication between the client and the server. The client will ensure that at least one message travels across the network within each keep alive period. In the absence of a data-related message during this time period, the client will send a very small MQTT \"ping\" message that the server will acknowledge. The keep alive interval enables the client to detect when the server is no longer available without having to wait for the long TCP/IP timeout. (Required field). Warning The keep-alive interval may \"conflict\" with the TCP idle timeout set at the TCP/IP level. As a best practice the TCP idle timeout should be at least 1,5 times the keep-alive time interval. If the TCP idle timeout is less or equal the keep-alive, the MQTT connection may be dropped due to the TCP idle timeout expiration. timeout : sets the timeout used for all interactions with the MQTT broker. (Required field). clean-session : controls the behavior of both the client and the server at the time of connection and disconnection. When this parameter is set to true, the state information is discarded at connection and disconnection; when set to false, the state information is maintained. (Required field). lwt parameters: define the MQTT \"Last Will and Testament\" (LWT) settings for the client. In the event that the client unexpectedly loses its connection to the server, the server publishes the LWT message (lwt.payload) to the LWT topic on behalf of the client. This allows other clients (subscribed to the LWT topic) to be made aware that the client has disconnected. LWT parameters that may be configured include: lwt.topic lwt.payload lwt.qos lwt.retain in-flight.persistence : defines the storage type where in-flight messages are persisted across reconnections. They may be stored in memory, or in a file on the disk. (Required field). protocol-version : defines the MQTT Protocol version to be used. This value may be 3.1 or 3.1.1. SSL parameters: define the SSL specific settings for the client. SSL parameters that can be configured include: ssl.default.protocol ssl.hostname.verification ssl.default.cipherSuites ssl.certificate.alias","title":"Data Transport Service Configuration"},{"location":"gateway-configuration/device-information/","text":"Device Information The Device section provides several information about the gateway where ESF is running on. This section can be accessed by selecting the Device option located in the System area. Profile The Profile tab shows several information about the gateway, organized under the Device, Hardware, Software and Java Information. Bundles This tab lists all the bundles installed on Kura, with details about the name, version, id, state and signature status. The signature value will be true if the corresponding bundle is signed, false otherwise. The buttons in the upper part of the tab allows the user to manage the listed bundles: Start Bundle : starts a bundle that is in Resolved or Installed state; Stop Bundle : stops a bundle that is in Active state; Refresh : reloads the bundles states list. Containers The Containers tab lists the containers and images that are currently managed by the Container Orchestration Service . From this tab, the user can start and stop containers and delete images. Threads The Threads tab shows a list of the threads that are currently running in the JVM. System Packages The System Packages tab shows the list of all the Linux packages installed on the OS. The package is detailed with the name, version and type (DEB/RPM/APK). System Properties The System Properties tab shows a list of relevant properties including OS and JVM parameters. Command A detailed description of this tab is presented in the Command Service page. System Logs The System Logs tab allows downloading a compressed file containing all the relevant log files from the gateway. The download button creates and downloads a compressed file with the following items: all the files in /var/log or the content of the folder defined by the kura.log.download.sources property; the content of the journal for the Kura process ( kura-journal.log ); the content of the journal for the whole system ( system-journal.log ). In addition to this feature, the page also allows the real-time displaying of system logs, if the framework has the availability of one or more components that implement the LogProvider API. The UI also provides a useful button to open a new Kura instance in a new browser window. A reference implementation of the LogProvider API is provided in the org.eclipse.kura.log.filesystem.provider bundle. This bundle exposes in the framework a factory that can be used to read filesystem files. By default, Eclipse Kura creates two log providers at startup: one that reads from /var/log/kura.log and the other that reads from /var/log/kura-audit.log . The collected logs are stored in a cache server-side and are collected from the point in time where the log providers get attached to the UI (usually, from the login or after a refresh of the browser's window). When the section \"System Logs\" is accessed, the new log entries are polled from the server's cache and stored client-side.","title":"Device Information"},{"location":"gateway-configuration/device-information/#device-information","text":"The Device section provides several information about the gateway where ESF is running on. This section can be accessed by selecting the Device option located in the System area.","title":"Device Information"},{"location":"gateway-configuration/device-information/#profile","text":"The Profile tab shows several information about the gateway, organized under the Device, Hardware, Software and Java Information.","title":"Profile"},{"location":"gateway-configuration/device-information/#bundles","text":"This tab lists all the bundles installed on Kura, with details about the name, version, id, state and signature status. The signature value will be true if the corresponding bundle is signed, false otherwise. The buttons in the upper part of the tab allows the user to manage the listed bundles: Start Bundle : starts a bundle that is in Resolved or Installed state; Stop Bundle : stops a bundle that is in Active state; Refresh : reloads the bundles states list.","title":"Bundles"},{"location":"gateway-configuration/device-information/#containers","text":"The Containers tab lists the containers and images that are currently managed by the Container Orchestration Service . From this tab, the user can start and stop containers and delete images.","title":"Containers"},{"location":"gateway-configuration/device-information/#threads","text":"The Threads tab shows a list of the threads that are currently running in the JVM.","title":"Threads"},{"location":"gateway-configuration/device-information/#system-packages","text":"The System Packages tab shows the list of all the Linux packages installed on the OS. The package is detailed with the name, version and type (DEB/RPM/APK).","title":"System Packages"},{"location":"gateway-configuration/device-information/#system-properties","text":"The System Properties tab shows a list of relevant properties including OS and JVM parameters.","title":"System Properties"},{"location":"gateway-configuration/device-information/#command","text":"A detailed description of this tab is presented in the Command Service page.","title":"Command"},{"location":"gateway-configuration/device-information/#system-logs","text":"The System Logs tab allows downloading a compressed file containing all the relevant log files from the gateway. The download button creates and downloads a compressed file with the following items: all the files in /var/log or the content of the folder defined by the kura.log.download.sources property; the content of the journal for the Kura process ( kura-journal.log ); the content of the journal for the whole system ( system-journal.log ). In addition to this feature, the page also allows the real-time displaying of system logs, if the framework has the availability of one or more components that implement the LogProvider API. The UI also provides a useful button to open a new Kura instance in a new browser window. A reference implementation of the LogProvider API is provided in the org.eclipse.kura.log.filesystem.provider bundle. This bundle exposes in the framework a factory that can be used to read filesystem files. By default, Eclipse Kura creates two log providers at startup: one that reads from /var/log/kura.log and the other that reads from /var/log/kura-audit.log . The collected logs are stored in a cache server-side and are collected from the point in time where the log providers get attached to the UI (usually, from the login or after a refresh of the browser's window). When the section \"System Logs\" is accessed, the new log entries are polled from the server's cache and stored client-side.","title":"System Logs"},{"location":"gateway-configuration/ethernet-configuration/","text":"Ethernet Configuration As described in the Network Configuration section, Ethernet interfaces have two configuration tabs: TCP/IP and DHCP & NAT . Each Ethernet interface may be configured either as LAN or WAN; it may also be disabled. If the interface is designated as LAN and is manually configured, the DHCP & NAT tab is enabled to allow DHCP server and/or 'many-to-one' NAT setup; otherwise, the DHCP & NAT tab is disabled. For more information on TCP/IP and DHCP & NAT settings, please refer to the Network Configuration section.","title":"Ethernet Configuration"},{"location":"gateway-configuration/ethernet-configuration/#ethernet-configuration","text":"As described in the Network Configuration section, Ethernet interfaces have two configuration tabs: TCP/IP and DHCP & NAT . Each Ethernet interface may be configured either as LAN or WAN; it may also be disabled. If the interface is designated as LAN and is manually configured, the DHCP & NAT tab is enabled to allow DHCP server and/or 'many-to-one' NAT setup; otherwise, the DHCP & NAT tab is disabled. For more information on TCP/IP and DHCP & NAT settings, please refer to the Network Configuration section.","title":"Ethernet Configuration"},{"location":"gateway-configuration/firewall-configuration/","text":"Firewall Configuration Kura offers easy management of the Linux firewall iptables included in an IoT Gateway. Additionally, Kura provides the ability to manage network access security to an IoT Gateway through the following: Open Ports (local service rules) Port Forwarding IP Forwarding and Masquerading (NAT service rules) 'Automatic' NAT service rules Open Ports, Port Forwarding, and IP Forwarding and Masquerading are configured via respective Firewall configuration tabs. 'Automatic' NAT is enabled for each local (LAN) interface using the DHCP & NAT tab of the respective interface configuration. Firewall Linux Configuration This section describes the changes applied by Kura at the Linux networking configuration. Please read the following note before proceeding with manual changes of the Linux networking configuration. Warning It is NOT recommended performing manual editing of the Linux networking configuration files when the gateway configuration is being managed through Kura. While Linux may correctly accept manual changes, Kura may not be able to interpret the new configuration resulting in an inconsistent state. When a new firewall configuration is submitted, Kura immediately applies it using the iptables service provided by the OS. Moreover, the rules are stored in the filesystem and a new Kura snapshot is generated containing the new configuration. At the next startup, the firewall service in the OS will re-apply them and Kura will check the firewall configuration against the one contained in the last snapshot. In this way, the user can update the snapshot with the needed rules and apply them to the system using the webUI or modify the snapshot_0.xml before the first start of Kura. In order to allow a better coexistence between Kura and external applications that need to modify firewall rules, Kura writes its rules to a set of custom iptables chains. They are input-kura , output-kura , forward-kura , forward-kura-pf and forward-kura-ipf for the filter table and input-kura , output-kura , prerouting-kura , prerouting-kura-pf , postrouting-kura , postrouting-kura-pf and postrouting-kura-ipf for the nat table. The custom chains are then put in their respective standard iptables chains, as shown in the following: iptables -t filter -I INPUT -j input-kura iptables -t filter -I OUTPUT -j output-kura iptables -t filter -I FORWARD -j forward-kura iptables -t filter -I forward-kura -j forward-kura-pf iptables -t filter -I forward-kura -j forward-kura-ipf iptables -t nat -I PREROUTING -j prerouting-kura iptables -t nat -I prerouting-kura -j prerouting-kura-pf iptables -t nat -I INPUT -j input-kura iptables -t nat -I OUTPUT -j output-kura iptables -t nat -I POSTROUTING -j postrouting-kura iptables -t nat -I postrouting-kura -j postrouting-kura-pf iptables -t nat -I postrouting-kura -j postrouting-kura-ipf Even if many firewall rules can be handled by Kura, it could be that some rules cannot be filled through the Web Console. In this case, custom firewall rules may be added to the /etc/init.d/firewall_cust script manually. These rules are applied/reapplied every time the firewall service starts, that is at the gateway startup. These custom rules should not be applied to the Kura custom chains, but to the standard ones. Open Ports If Kura is running on a gateway, all TCP/UDP ports are closed by default unless they are listed in the Open Ports tab of the Firewall section in the Gateway Administration Console, or in the /etc/sysconfig/iptables script. Therefore, if a user needs to connect to a specific port on a gateway, it is insufficient to have an application listening on the desired port; the port also needs to be opened in the firewall. To open a port using the Gateway Administration Console, select the Firewall option located in the System area. The Firewall configuration display appears in the main window. With the Open Ports tab selected, click the New button. The New Open Port Entry form appears. The New Open Port Entry form contains the following configuration parameters: Port : specifies the port to be opened. (Required field.) Protocol : defines the protocol (tcp or udp). (Required field.) Permitted Network : only allows packets originated by a host on this network. Permitted Interface Name : only allows packets arrived on this interface. Unpermitted Interface Name : blocks packets arrived on this interface. Permitted MAC Address : only allows packets originated by this host. Source Port Range : only allows packets with source port in the defined range. Complete the New Open Port Entry form and click the Submit button when finished. Once the form is submitted, a new port entry will appear. Click the Apply button for the change to take effect. The firewall rules related to the open ports section are stored in the input-kura custom chain of the filter table. Port Forwarding Port forwarding rules are needed to establish connectivity from the WAN side to a specific port on a host that resides on a LAN behind the gateway. In this case, a routing solution may be avoided since the connection is made to a specified external port on a gateway, and packets are forwarded to an internal port on the destination host; therefore, it is not necessary to add the external port to the list of open ports. To add a port forwarding rule, select the Port Forwarding tab on the Firewall display and click the New button. The Port Forward Entry form appears. The Port Forward Entry form contains the following configuration parameters: Input Interface : specifies the interface through which a packet is going to be received. (Required field). Output Interface : specifies the interface through which a packet is going to be forwarded to its destination. (Required field). LAN Address : supplies the IP address of destination host. (Required field). Protocol : defines the protocol (tcp or udp). (Required field). External Port : provides the external destination port on gateway unit. (Required field). Internal Port : provides the port on a destination host. (Required field). Enable Masquerading : defines whether masquerading is used (yes or no). If enabled, the gateway replaces the IP address of the originating host with the IP address of its own output (LAN) interface. This is needed when the destination host does not have a back route to the originating host (or default gateway route) via the gateway unit. The masquerading option is provided with port forwarding to limit gateway forwarding only to the destination port. (Required field). Permitted Network : only forwards if the packet is originated from a host on this network. Permitted MAC Address : only forwards if the packet is originated by this host. Source Port Range : only forwards if the packet's source port is within the defined range. Complete the Port Forward Entry form and click the Apply button for the desired port forwarding rules to take effect. The firewall rules related to the port forwarding section are stored in the forward-kura-pf custom chain of the filter table and in the postrouting-kura-pf and prerouting-kura-pf chains of the nat table. Port Forwarding example This section describes an example of port forwarding rules. The initial setup is described below. A couple of RaspberryPi that shares the same LAN over Ethernet. The first RaspberryPi running Kura is configured as follows: The eth0 interface static with IP address of 172.16.0.5. There is no default gateway. The second RaspberryPi running Kura is configured as follows: The eth0 interface LAN/static with IP address of 172.16.0.1/24 and no NAT. The wlan0 interface is WAN/DHCP client. A laptop is connected to the same network of the wlan0 of the second RaspberryPi and can ping its wlan0 interface. The purpose of the second RaspberryPi configuration is to enable access to the Administration Console running on the first one (port 80) by connecting to the second RaspberryPi's port 8080 over the wlan. This scenario assumes that IP addresses are assigned as follows: Second RaspberryPi wlan0 - 10.200.12.6 Laptop wlan0 - 10.200.12.10 The following port forwarding entries are added to the second RaspberryPi configuration as described above using the Port Forward Entry form: Input Interface - wlan0 Output Interface - eth0 LAN Address - 172.16.0.5 Protocol - tcp External Port - 8080 Internal Port - 80 Masquerade - yes The Permitted Network , Permitted MAC Address , and Source Port Range fields are left blank. The following iptables rules are applied and added to the /etc/sysconfig/iptables file: iptables -t nat -A prerouting-kura-pf -i wlan0 -p tcp -s 0 .0.0.0/0 --dport 8080 -j DNAT --to 172 .16.0.5:80 iptables -t nat -A postrouting-kura-pf -o eth0 -p tcp -d 172 .16.0.5 -j MASQUERADE iptables -A forward-kura-pf -i wlan0 -o eth0 -p tcp -s 0 .0.0.0/0 --dport 80 -d 172 .16.0.5 -j ACCEPT iptables -A forward-kura-pf -i eth0 -o wlan0 -p tcp -s 172 .16.0.5 -m state --state RELATED,ESTABLISHED -j ACCEPT The following iptables commands may be used to verify that the new rules have been applied: sudo iptables -v -n -L sudo iptables -v -n -L -t nat At this point, it is possible to try to connect to http://10.200.12.6 and to http://10.200.12.6:8080 from the laptop. Note that when a connection is made to the device on port 80, it is to the Kura configuration page on the device itself (the second RaspberryPi). When the gateway is connected on port 8080, you are forwarded to the Kura Gateway Administration Console on the first RaspberryPi. The destination host can only be reached by connecting to the gateway on port 8080. Another way to connect to the Kura Gateway Administration Console on the first RaspberryPi would be to add an IP Forwarding/Masquerading entry as described in the next section. IP Forwarding/Masquerading The advantage of the Automatic NAT method is its simplicity. However, this approach does not handle reverse NATing, and it cannot be used for interfaces that are not listed in the Gateway Administration Console (such as VPN tun0 interface). To set up generic (one-to-many) NATing, select the IP Forwarding/Masquerading tab on the Firewall display. The IP Forwarding/Masquerading form appears. The IP Forwarding/Masquerading form contains the following configuration parameters: Input Interface : specifies the interface through which a packet is going to be received. (Required field). Output Interface : specifies the interface through which a packet is going to be forwarded to its destination. (Required field). Protocol : defines the protocol of the rule to check (all, tcp, or udp). (Required field). Source Network/Host : identifies the source network or host name (CIDR notation). Set to 0.0.0.0/0 if empty. Destination Network/Host : identifies the destination network or host name (CIDR notation). Set to 0.0.0.0/0 if empty. Enable Masquerading : defines whether masquerading is used (yes or no). If set to 'yes', masquerading is enabled. If set to 'no', only FORWARDING rules are be added. (Required field). The rules will be added to the forward-kura-ipf chain in the filter table and in the postrouting-kura-ipf one in the nat table. As a use-case scenario, consider the same setup as in port forwarding, but with cellular interface disabled and eth1 interface configured as WAN/DHCP client. In this case, the interfaces of the gateway are configured as follows: eth0 : LAN/Static/No NAT 172.16.0.1/24 eth1 : WAN/DHCP 10.11.5.4/24 To reach the gateway sitting on the 172.16.0.5/24 from a specific host on the 10.11.0.0/16 network, set up the following Reverse NAT entry: Input Interface: eth1 (WAN interface) Output Interface: eth0 (LAN interface) Protocol: all Source Network/Host: 10.11.5.21/32 Destination Network/Host: 172.16.0.5/32 Enable Masquerading: yes This case applies the following iptables rules: iptables -t nat -A postrouting-kura-ipf -p tcp -s 10 .11.5.21/32 -d 172 .16.0.5/32 -o eth0 -j MASQUERADE iptables -A forward-kura-ipf -p tcp -s 172 .16.0.5/32 -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT iptables -A forward-kura-ipf -p tcp -s 10 .11.5.21/32 -d 172 .16.0.5/32 -i eth1 -o eth0 -m tcp -j ACCEPT Additionally, a route to the 172.16.0.0/24 network needs to be configured on a connecting laptop as shown below: sudo route add -net 172 .16.0.0 netmask 255 .255.255.0 gw 10 .11.5.4 Since masquerading is enabled, there is no need to specify the back route on the destination host. Note that with this setup, the gateway only forwards packets originating on the 10.11.5.21 laptop to the 172.16.0.5 destination. If the Source Network/Host and Destination Network/Host fields are empty, iptables rules appear as follows: iptables -t nat -A postrouting-kura-ipf -p tcp -s 0 .0.0.0/0 -d 0 .0.0.0/0 -o eth0 -j MASQUERADE iptables -A forward-kura-ipf -p tcp -s 0 .0.0.0/0 -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT iptables -A forward-kura-ipf -p tcp -s 0 .0.0.0/0 -d 0 .0.0.0/0 -i eth1 -o eth0 -j ACCEPT The gateway forwards packets from any external host (connected to eth1) to any destination on the local network (eth0 interface).","title":"Firewall Configuration"},{"location":"gateway-configuration/firewall-configuration/#firewall-configuration","text":"Kura offers easy management of the Linux firewall iptables included in an IoT Gateway. Additionally, Kura provides the ability to manage network access security to an IoT Gateway through the following: Open Ports (local service rules) Port Forwarding IP Forwarding and Masquerading (NAT service rules) 'Automatic' NAT service rules Open Ports, Port Forwarding, and IP Forwarding and Masquerading are configured via respective Firewall configuration tabs. 'Automatic' NAT is enabled for each local (LAN) interface using the DHCP & NAT tab of the respective interface configuration.","title":"Firewall Configuration"},{"location":"gateway-configuration/firewall-configuration/#firewall-linux-configuration","text":"This section describes the changes applied by Kura at the Linux networking configuration. Please read the following note before proceeding with manual changes of the Linux networking configuration. Warning It is NOT recommended performing manual editing of the Linux networking configuration files when the gateway configuration is being managed through Kura. While Linux may correctly accept manual changes, Kura may not be able to interpret the new configuration resulting in an inconsistent state. When a new firewall configuration is submitted, Kura immediately applies it using the iptables service provided by the OS. Moreover, the rules are stored in the filesystem and a new Kura snapshot is generated containing the new configuration. At the next startup, the firewall service in the OS will re-apply them and Kura will check the firewall configuration against the one contained in the last snapshot. In this way, the user can update the snapshot with the needed rules and apply them to the system using the webUI or modify the snapshot_0.xml before the first start of Kura. In order to allow a better coexistence between Kura and external applications that need to modify firewall rules, Kura writes its rules to a set of custom iptables chains. They are input-kura , output-kura , forward-kura , forward-kura-pf and forward-kura-ipf for the filter table and input-kura , output-kura , prerouting-kura , prerouting-kura-pf , postrouting-kura , postrouting-kura-pf and postrouting-kura-ipf for the nat table. The custom chains are then put in their respective standard iptables chains, as shown in the following: iptables -t filter -I INPUT -j input-kura iptables -t filter -I OUTPUT -j output-kura iptables -t filter -I FORWARD -j forward-kura iptables -t filter -I forward-kura -j forward-kura-pf iptables -t filter -I forward-kura -j forward-kura-ipf iptables -t nat -I PREROUTING -j prerouting-kura iptables -t nat -I prerouting-kura -j prerouting-kura-pf iptables -t nat -I INPUT -j input-kura iptables -t nat -I OUTPUT -j output-kura iptables -t nat -I POSTROUTING -j postrouting-kura iptables -t nat -I postrouting-kura -j postrouting-kura-pf iptables -t nat -I postrouting-kura -j postrouting-kura-ipf Even if many firewall rules can be handled by Kura, it could be that some rules cannot be filled through the Web Console. In this case, custom firewall rules may be added to the /etc/init.d/firewall_cust script manually. These rules are applied/reapplied every time the firewall service starts, that is at the gateway startup. These custom rules should not be applied to the Kura custom chains, but to the standard ones.","title":"Firewall Linux Configuration"},{"location":"gateway-configuration/firewall-configuration/#open-ports","text":"If Kura is running on a gateway, all TCP/UDP ports are closed by default unless they are listed in the Open Ports tab of the Firewall section in the Gateway Administration Console, or in the /etc/sysconfig/iptables script. Therefore, if a user needs to connect to a specific port on a gateway, it is insufficient to have an application listening on the desired port; the port also needs to be opened in the firewall. To open a port using the Gateway Administration Console, select the Firewall option located in the System area. The Firewall configuration display appears in the main window. With the Open Ports tab selected, click the New button. The New Open Port Entry form appears. The New Open Port Entry form contains the following configuration parameters: Port : specifies the port to be opened. (Required field.) Protocol : defines the protocol (tcp or udp). (Required field.) Permitted Network : only allows packets originated by a host on this network. Permitted Interface Name : only allows packets arrived on this interface. Unpermitted Interface Name : blocks packets arrived on this interface. Permitted MAC Address : only allows packets originated by this host. Source Port Range : only allows packets with source port in the defined range. Complete the New Open Port Entry form and click the Submit button when finished. Once the form is submitted, a new port entry will appear. Click the Apply button for the change to take effect. The firewall rules related to the open ports section are stored in the input-kura custom chain of the filter table.","title":"Open Ports"},{"location":"gateway-configuration/firewall-configuration/#port-forwarding","text":"Port forwarding rules are needed to establish connectivity from the WAN side to a specific port on a host that resides on a LAN behind the gateway. In this case, a routing solution may be avoided since the connection is made to a specified external port on a gateway, and packets are forwarded to an internal port on the destination host; therefore, it is not necessary to add the external port to the list of open ports. To add a port forwarding rule, select the Port Forwarding tab on the Firewall display and click the New button. The Port Forward Entry form appears. The Port Forward Entry form contains the following configuration parameters: Input Interface : specifies the interface through which a packet is going to be received. (Required field). Output Interface : specifies the interface through which a packet is going to be forwarded to its destination. (Required field). LAN Address : supplies the IP address of destination host. (Required field). Protocol : defines the protocol (tcp or udp). (Required field). External Port : provides the external destination port on gateway unit. (Required field). Internal Port : provides the port on a destination host. (Required field). Enable Masquerading : defines whether masquerading is used (yes or no). If enabled, the gateway replaces the IP address of the originating host with the IP address of its own output (LAN) interface. This is needed when the destination host does not have a back route to the originating host (or default gateway route) via the gateway unit. The masquerading option is provided with port forwarding to limit gateway forwarding only to the destination port. (Required field). Permitted Network : only forwards if the packet is originated from a host on this network. Permitted MAC Address : only forwards if the packet is originated by this host. Source Port Range : only forwards if the packet's source port is within the defined range. Complete the Port Forward Entry form and click the Apply button for the desired port forwarding rules to take effect. The firewall rules related to the port forwarding section are stored in the forward-kura-pf custom chain of the filter table and in the postrouting-kura-pf and prerouting-kura-pf chains of the nat table.","title":"Port Forwarding"},{"location":"gateway-configuration/firewall-configuration/#port-forwarding-example","text":"This section describes an example of port forwarding rules. The initial setup is described below. A couple of RaspberryPi that shares the same LAN over Ethernet. The first RaspberryPi running Kura is configured as follows: The eth0 interface static with IP address of 172.16.0.5. There is no default gateway. The second RaspberryPi running Kura is configured as follows: The eth0 interface LAN/static with IP address of 172.16.0.1/24 and no NAT. The wlan0 interface is WAN/DHCP client. A laptop is connected to the same network of the wlan0 of the second RaspberryPi and can ping its wlan0 interface. The purpose of the second RaspberryPi configuration is to enable access to the Administration Console running on the first one (port 80) by connecting to the second RaspberryPi's port 8080 over the wlan. This scenario assumes that IP addresses are assigned as follows: Second RaspberryPi wlan0 - 10.200.12.6 Laptop wlan0 - 10.200.12.10 The following port forwarding entries are added to the second RaspberryPi configuration as described above using the Port Forward Entry form: Input Interface - wlan0 Output Interface - eth0 LAN Address - 172.16.0.5 Protocol - tcp External Port - 8080 Internal Port - 80 Masquerade - yes The Permitted Network , Permitted MAC Address , and Source Port Range fields are left blank. The following iptables rules are applied and added to the /etc/sysconfig/iptables file: iptables -t nat -A prerouting-kura-pf -i wlan0 -p tcp -s 0 .0.0.0/0 --dport 8080 -j DNAT --to 172 .16.0.5:80 iptables -t nat -A postrouting-kura-pf -o eth0 -p tcp -d 172 .16.0.5 -j MASQUERADE iptables -A forward-kura-pf -i wlan0 -o eth0 -p tcp -s 0 .0.0.0/0 --dport 80 -d 172 .16.0.5 -j ACCEPT iptables -A forward-kura-pf -i eth0 -o wlan0 -p tcp -s 172 .16.0.5 -m state --state RELATED,ESTABLISHED -j ACCEPT The following iptables commands may be used to verify that the new rules have been applied: sudo iptables -v -n -L sudo iptables -v -n -L -t nat At this point, it is possible to try to connect to http://10.200.12.6 and to http://10.200.12.6:8080 from the laptop. Note that when a connection is made to the device on port 80, it is to the Kura configuration page on the device itself (the second RaspberryPi). When the gateway is connected on port 8080, you are forwarded to the Kura Gateway Administration Console on the first RaspberryPi. The destination host can only be reached by connecting to the gateway on port 8080. Another way to connect to the Kura Gateway Administration Console on the first RaspberryPi would be to add an IP Forwarding/Masquerading entry as described in the next section.","title":"Port Forwarding example"},{"location":"gateway-configuration/firewall-configuration/#ip-forwardingmasquerading","text":"The advantage of the Automatic NAT method is its simplicity. However, this approach does not handle reverse NATing, and it cannot be used for interfaces that are not listed in the Gateway Administration Console (such as VPN tun0 interface). To set up generic (one-to-many) NATing, select the IP Forwarding/Masquerading tab on the Firewall display. The IP Forwarding/Masquerading form appears. The IP Forwarding/Masquerading form contains the following configuration parameters: Input Interface : specifies the interface through which a packet is going to be received. (Required field). Output Interface : specifies the interface through which a packet is going to be forwarded to its destination. (Required field). Protocol : defines the protocol of the rule to check (all, tcp, or udp). (Required field). Source Network/Host : identifies the source network or host name (CIDR notation). Set to 0.0.0.0/0 if empty. Destination Network/Host : identifies the destination network or host name (CIDR notation). Set to 0.0.0.0/0 if empty. Enable Masquerading : defines whether masquerading is used (yes or no). If set to 'yes', masquerading is enabled. If set to 'no', only FORWARDING rules are be added. (Required field). The rules will be added to the forward-kura-ipf chain in the filter table and in the postrouting-kura-ipf one in the nat table. As a use-case scenario, consider the same setup as in port forwarding, but with cellular interface disabled and eth1 interface configured as WAN/DHCP client. In this case, the interfaces of the gateway are configured as follows: eth0 : LAN/Static/No NAT 172.16.0.1/24 eth1 : WAN/DHCP 10.11.5.4/24 To reach the gateway sitting on the 172.16.0.5/24 from a specific host on the 10.11.0.0/16 network, set up the following Reverse NAT entry: Input Interface: eth1 (WAN interface) Output Interface: eth0 (LAN interface) Protocol: all Source Network/Host: 10.11.5.21/32 Destination Network/Host: 172.16.0.5/32 Enable Masquerading: yes This case applies the following iptables rules: iptables -t nat -A postrouting-kura-ipf -p tcp -s 10 .11.5.21/32 -d 172 .16.0.5/32 -o eth0 -j MASQUERADE iptables -A forward-kura-ipf -p tcp -s 172 .16.0.5/32 -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT iptables -A forward-kura-ipf -p tcp -s 10 .11.5.21/32 -d 172 .16.0.5/32 -i eth1 -o eth0 -m tcp -j ACCEPT Additionally, a route to the 172.16.0.0/24 network needs to be configured on a connecting laptop as shown below: sudo route add -net 172 .16.0.0 netmask 255 .255.255.0 gw 10 .11.5.4 Since masquerading is enabled, there is no need to specify the back route on the destination host. Note that with this setup, the gateway only forwards packets originating on the 10.11.5.21 laptop to the 172.16.0.5 destination. If the Source Network/Host and Destination Network/Host fields are empty, iptables rules appear as follows: iptables -t nat -A postrouting-kura-ipf -p tcp -s 0 .0.0.0/0 -d 0 .0.0.0/0 -o eth0 -j MASQUERADE iptables -A forward-kura-ipf -p tcp -s 0 .0.0.0/0 -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT iptables -A forward-kura-ipf -p tcp -s 0 .0.0.0/0 -d 0 .0.0.0/0 -i eth1 -o eth0 -j ACCEPT The gateway forwards packets from any external host (connected to eth1) to any destination on the local network (eth0 interface).","title":"IP Forwarding/Masquerading"},{"location":"gateway-configuration/gateway-administration-console-authentication/","text":"Gateway Administration Console Authentication The Gateway Administration Console supports multiple login identities with associated permissions and HTTPS client side authentication with certificates. The identity and permission configuration and credentials is stored externally the UserAdmin service (see Authentication and Authorization for more details). Permissions The Gateway Administration Console defines the following permissions, that allow to restrict the operations that an identity is allowed to perform: kura.cloud.connection.admin : Allows to manage cloud connections using Cloud Connections tab. kura.packages.admin : Allows to install deployment packages using the Packages tab. kura.device : Allows to interact with the Device and Status tabs. kura.network.admin : Allows to manage network connectivity and firewall configuration using the Network and Firewall tabs. kura.wires.admin : Allows to manage Wire Graph and Driver and Asset configurations using the Wires and Drivers and Assets tabs. kura.admin : This permission implies all other permissions, including the ones defined by external applications. Default identities Kura provides the following identities by default: Name Password Permissions admin admin kura.admin appadmin appadmin kura.cloud.connection.admin, kura.packages.admin, kura.wires.admin netadmin netadmin kura.cloud.connection.admin, kura.device, kura.network.admin It is possible to modify/remove the default identity configuration. Login The login screen can be accessed by entering the https://${device.ip} URL in a browser window, where ${device.ip} is the IP address. Replace https with http if HTTPS support has been disabled on the gateway. Identity name and password In order to login with identity name and password, select Password as authentication method and enter the credentials. Note Password authentication method might not be available if it has been disabled by the administrator using the Security -> Web Console section. Forced password change on login Kura supports forcing an identity to change the password at login, before accessing the Administration Console. This functionality is enabled by default after a fresh installation. At login the following prompt will appear forcing the user to define a new password. This functionality can be configured by an admin identity using the Identities section of the Administration Console. The forced password change can also be disabled by editing the snapshot_0.xml file removing the kura.need.password.change property for the desired identity in the org.eclipse.kura.internal.useradmin.store.RoleRepositoryStoreImpl configuration before Kura first boot. If this functionality is enabled, REST API username and password authentication is will be disabled for the specific identity until the password is updated, REST API certificate authentication will still work. Certificate authentication In order to perform HTTPS certificate authentication, select the Certificate authentication method and click Login , the browser may prompt to select the certificate to use. Note Certificate authentication method might not be available if no HTTPS with client authentication ports have been configured or if it has been explicitly disabled by the administrator using the Security -> Web Console section. Identity and Permission management The Gateway Administration Console allows the management of identity and permission configuration in a dedicated view, accessible by navigating to the Identities section: The section above allows to: Create new identities New identities can be created by clicking the New Identity button. Remove existing identities Existing identities can be removed by selecting the corresponding entry in the list and pressing the Delete Identity button. Manage password authentication Password authentication can be enabled or disabled by changing the Password authentication enabled parameter. Changing this parameter will not modify the existing stored password. Enabling password authentication for a new identity requires to define a new password. The password can be set/modified by clicking the Change password button. Assign or remove permissions Permissions can be assigned or removed by ticking the corresponding entries in the Permissions table. No changes will be applied to the gateway until the Apply button is pressed. Certificate based authentication The Gateway Administration Console supports HTTPS certificate based client side authentication. The authentication process works as follows: One or more Https client certificate must be added to keystore, this can be done using the Certificate Management section. The user must provide a certificate or certificate chain signed by one of the CAs added as Https client certificate . The common name field of the leaf certificate provided by the user must be the name of the identity that should be used for the session. HTTPS with certificate based authentication must be enabled in the HTTP/HTTPS Configuration section. Log in with certificate can be performed by selecting the Certificate authentication method in Gateway Administration Console login screen or by connecting directly to the HTTPS port with client side authentication specified in gateway configuration.","title":"Gateway Administration Console Authentication"},{"location":"gateway-configuration/gateway-administration-console-authentication/#gateway-administration-console-authentication","text":"The Gateway Administration Console supports multiple login identities with associated permissions and HTTPS client side authentication with certificates. The identity and permission configuration and credentials is stored externally the UserAdmin service (see Authentication and Authorization for more details).","title":"Gateway Administration Console Authentication"},{"location":"gateway-configuration/gateway-administration-console-authentication/#permissions","text":"The Gateway Administration Console defines the following permissions, that allow to restrict the operations that an identity is allowed to perform: kura.cloud.connection.admin : Allows to manage cloud connections using Cloud Connections tab. kura.packages.admin : Allows to install deployment packages using the Packages tab. kura.device : Allows to interact with the Device and Status tabs. kura.network.admin : Allows to manage network connectivity and firewall configuration using the Network and Firewall tabs. kura.wires.admin : Allows to manage Wire Graph and Driver and Asset configurations using the Wires and Drivers and Assets tabs. kura.admin : This permission implies all other permissions, including the ones defined by external applications.","title":"Permissions"},{"location":"gateway-configuration/gateway-administration-console-authentication/#default-identities","text":"Kura provides the following identities by default: Name Password Permissions admin admin kura.admin appadmin appadmin kura.cloud.connection.admin, kura.packages.admin, kura.wires.admin netadmin netadmin kura.cloud.connection.admin, kura.device, kura.network.admin It is possible to modify/remove the default identity configuration.","title":"Default identities"},{"location":"gateway-configuration/gateway-administration-console-authentication/#login","text":"The login screen can be accessed by entering the https://${device.ip} URL in a browser window, where ${device.ip} is the IP address. Replace https with http if HTTPS support has been disabled on the gateway.","title":"Login"},{"location":"gateway-configuration/gateway-administration-console-authentication/#identity-name-and-password","text":"In order to login with identity name and password, select Password as authentication method and enter the credentials. Note Password authentication method might not be available if it has been disabled by the administrator using the Security -> Web Console section.","title":"Identity name and password"},{"location":"gateway-configuration/gateway-administration-console-authentication/#forced-password-change-on-login","text":"Kura supports forcing an identity to change the password at login, before accessing the Administration Console. This functionality is enabled by default after a fresh installation. At login the following prompt will appear forcing the user to define a new password. This functionality can be configured by an admin identity using the Identities section of the Administration Console. The forced password change can also be disabled by editing the snapshot_0.xml file removing the kura.need.password.change property for the desired identity in the org.eclipse.kura.internal.useradmin.store.RoleRepositoryStoreImpl configuration before Kura first boot. If this functionality is enabled, REST API username and password authentication is will be disabled for the specific identity until the password is updated, REST API certificate authentication will still work.","title":"Forced password change on login"},{"location":"gateway-configuration/gateway-administration-console-authentication/#certificate-authentication","text":"In order to perform HTTPS certificate authentication, select the Certificate authentication method and click Login , the browser may prompt to select the certificate to use. Note Certificate authentication method might not be available if no HTTPS with client authentication ports have been configured or if it has been explicitly disabled by the administrator using the Security -> Web Console section.","title":"Certificate authentication"},{"location":"gateway-configuration/gateway-administration-console-authentication/#identity-and-permission-management","text":"The Gateway Administration Console allows the management of identity and permission configuration in a dedicated view, accessible by navigating to the Identities section: The section above allows to:","title":"Identity and Permission management"},{"location":"gateway-configuration/gateway-administration-console-authentication/#create-new-identities","text":"New identities can be created by clicking the New Identity button.","title":"Create new identities"},{"location":"gateway-configuration/gateway-administration-console-authentication/#remove-existing-identities","text":"Existing identities can be removed by selecting the corresponding entry in the list and pressing the Delete Identity button.","title":"Remove existing identities"},{"location":"gateway-configuration/gateway-administration-console-authentication/#manage-password-authentication","text":"Password authentication can be enabled or disabled by changing the Password authentication enabled parameter. Changing this parameter will not modify the existing stored password. Enabling password authentication for a new identity requires to define a new password. The password can be set/modified by clicking the Change password button.","title":"Manage password authentication"},{"location":"gateway-configuration/gateway-administration-console-authentication/#assign-or-remove-permissions","text":"Permissions can be assigned or removed by ticking the corresponding entries in the Permissions table. No changes will be applied to the gateway until the Apply button is pressed.","title":"Assign or remove permissions"},{"location":"gateway-configuration/gateway-administration-console-authentication/#certificate-based-authentication","text":"The Gateway Administration Console supports HTTPS certificate based client side authentication. The authentication process works as follows: One or more Https client certificate must be added to keystore, this can be done using the Certificate Management section. The user must provide a certificate or certificate chain signed by one of the CAs added as Https client certificate . The common name field of the leaf certificate provided by the user must be the name of the identity that should be used for the session. HTTPS with certificate based authentication must be enabled in the HTTP/HTTPS Configuration section. Log in with certificate can be performed by selecting the Certificate authentication method in Gateway Administration Console login screen or by connecting directly to the HTTPS port with client side authentication specified in gateway configuration.","title":"Certificate based authentication"},{"location":"gateway-configuration/gateway-administration-console/","text":"Gateway Administration Console Accessing the Kura Gateway Administration Console Kura provides a web-based, user interface for the administration and management of your IoT gateway. The Kura Gateway Administration Console enables you to monitor the gateway status, manage the network configuration, and manage the installed application and services. Access to the Kura Gateway Administration Console requires that a unit running Eclipse Kura is reachable via its Ethernet primary interface. Connections on HTTP port 443 for these interfaces are allowed by default through the built-in firewall. The Kura Gateway Administration Console can be accessed by typing the IP address of the gateway into the browser's URL bar. Once the URL is submitted, the user is required to log in and is then redirected to the Administration Console (e.g., https://192.168.2.8/admin/console ) shown in the screen capture below. The default login name and password is admin/admin . Warning It is recommended to change the default password after initial setup and before deployment, as well as limiting access to the Administration Console to a trusted local network interface using appropriate firewall rules. Password change Once logged in, the user can modify its password (recommended after the first login). To access the option, click on the button near the username in the header section. A dropdown menu appears with the logout and the password modification options. When clicking on \"Change password\", the following dialog will appear: After confirming the changes, the user will be logged out. Accessing the ESF Gateway Administration Console over a Cellular Link In order to connect to the Gateway Administration Console via a cellular interface, the following requirements must be met: The service plan must allow for a static, public IP address to be assigned to the cellular interface. The used ports must not be blocked by the provider. The user must add Open Port entries for the cellular interface. This may be done either through the Firewall tab. If some of the used ports are blocked by the service provider, there is an option to reconfigure the gateway to use another port (i.e., 8080). In order to do so, the following requirements must be met: The HttpService configuration must be changed to use the new ports. The new ports must be open in the firewall for all network interfaces. HTTPS related warnings Most browsers will probably warn the user that the connection is not secure when Gateway Administration Console is accessed using HTTPS. In order to remove the warning, the browser must be able to verify the identity of the gateway as an HTTPS server. The verification process will fail with default server certificate provided by Kura because it is self-signed and it is not suitable for hostname verification. Fixing this might require to configure the browser to trust the certificate provided by the gateway and/or using a server certificate signed by a CA trusted by the browser and assigning a DNS name to the gateway in order to pass hostname verification. System Use Notification Banner For security reasons, it may be needed to display to the user a banner that describes the intended system use before authenticating. The system use notification message is customisable by authorised personnel in the Security section of the ESF Wen UI, in the Web Console tab.","title":"Gateway Administration Console"},{"location":"gateway-configuration/gateway-administration-console/#gateway-administration-console","text":"","title":"Gateway Administration Console"},{"location":"gateway-configuration/gateway-administration-console/#accessing-the-kura-gateway-administration-console","text":"Kura provides a web-based, user interface for the administration and management of your IoT gateway. The Kura Gateway Administration Console enables you to monitor the gateway status, manage the network configuration, and manage the installed application and services. Access to the Kura Gateway Administration Console requires that a unit running Eclipse Kura is reachable via its Ethernet primary interface. Connections on HTTP port 443 for these interfaces are allowed by default through the built-in firewall. The Kura Gateway Administration Console can be accessed by typing the IP address of the gateway into the browser's URL bar. Once the URL is submitted, the user is required to log in and is then redirected to the Administration Console (e.g., https://192.168.2.8/admin/console ) shown in the screen capture below. The default login name and password is admin/admin . Warning It is recommended to change the default password after initial setup and before deployment, as well as limiting access to the Administration Console to a trusted local network interface using appropriate firewall rules.","title":"Accessing the Kura Gateway Administration Console"},{"location":"gateway-configuration/gateway-administration-console/#password-change","text":"Once logged in, the user can modify its password (recommended after the first login). To access the option, click on the button near the username in the header section. A dropdown menu appears with the logout and the password modification options. When clicking on \"Change password\", the following dialog will appear: After confirming the changes, the user will be logged out.","title":"Password change"},{"location":"gateway-configuration/gateway-administration-console/#accessing-the-esf-gateway-administration-console-over-a-cellular-link","text":"In order to connect to the Gateway Administration Console via a cellular interface, the following requirements must be met: The service plan must allow for a static, public IP address to be assigned to the cellular interface. The used ports must not be blocked by the provider. The user must add Open Port entries for the cellular interface. This may be done either through the Firewall tab. If some of the used ports are blocked by the service provider, there is an option to reconfigure the gateway to use another port (i.e., 8080). In order to do so, the following requirements must be met: The HttpService configuration must be changed to use the new ports. The new ports must be open in the firewall for all network interfaces.","title":"Accessing the ESF Gateway Administration Console over a Cellular Link"},{"location":"gateway-configuration/gateway-administration-console/#https-related-warnings","text":"Most browsers will probably warn the user that the connection is not secure when Gateway Administration Console is accessed using HTTPS. In order to remove the warning, the browser must be able to verify the identity of the gateway as an HTTPS server. The verification process will fail with default server certificate provided by Kura because it is self-signed and it is not suitable for hostname verification. Fixing this might require to configure the browser to trust the certificate provided by the gateway and/or using a server certificate signed by a CA trusted by the browser and assigning a DNS name to the gateway in order to pass hostname verification.","title":"HTTPS related warnings"},{"location":"gateway-configuration/gateway-administration-console/#system-use-notification-banner","text":"For security reasons, it may be needed to display to the user a banner that describes the intended system use before authenticating. The system use notification message is customisable by authorised personnel in the Security section of the ESF Wen UI, in the Web Console tab.","title":"System Use Notification Banner"},{"location":"gateway-configuration/gateway-status/","text":"Gateway Status The status of the gateway may be viewed from the Status window, which is accessed by selecting the Status option located in the System area. The Status window provides a summary of the key information regarding the status of the gateway including its IoT Cloud connection and network configuration. The values reported in the page can be reloaded using the Refresh button. This will read the current values from the system and update the page. Since the update procedure can take time, the update can be performed at most every 30 seconds. Cloud Services This section provides a summary of the IoT Cloud connection status including the following details: Account - defines the name of the account used by the MqttDataTransport service when an MQTT connection is opened. Broker URL - defines the URL of the MQTT broker. Client ID - specifies the client identifier used by the MqttDataTransport service when an MQTT connection is opened. Service Status - provides the status of the DataService and DataTransport connection. Valid values are CONNECTED or DISCONNECTED. Username - supplies the name of the user used by the MqttDataTransport service when an MQTT connection is opened. Ethernet, Wireless, and Cellular Settings This section provides information about the currently configured network interfaces. Position Status This section provides the GPS status and latest known position (if applicable) including the following details: Longitude - longitude as reported by the PositionService in radians. Latitude - latitude as reported by the PositionService in radians. Altitude - altitude as reported by the PositionService in meters. Warning The status reported in the page may not be synchronized with the real state of the system. In this case, use the Refresh button to updated the values in the page.","title":"Gateway Status"},{"location":"gateway-configuration/gateway-status/#gateway-status","text":"The status of the gateway may be viewed from the Status window, which is accessed by selecting the Status option located in the System area. The Status window provides a summary of the key information regarding the status of the gateway including its IoT Cloud connection and network configuration. The values reported in the page can be reloaded using the Refresh button. This will read the current values from the system and update the page. Since the update procedure can take time, the update can be performed at most every 30 seconds.","title":"Gateway Status"},{"location":"gateway-configuration/gateway-status/#cloud-services","text":"This section provides a summary of the IoT Cloud connection status including the following details: Account - defines the name of the account used by the MqttDataTransport service when an MQTT connection is opened. Broker URL - defines the URL of the MQTT broker. Client ID - specifies the client identifier used by the MqttDataTransport service when an MQTT connection is opened. Service Status - provides the status of the DataService and DataTransport connection. Valid values are CONNECTED or DISCONNECTED. Username - supplies the name of the user used by the MqttDataTransport service when an MQTT connection is opened.","title":"Cloud Services"},{"location":"gateway-configuration/gateway-status/#ethernet-wireless-and-cellular-settings","text":"This section provides information about the currently configured network interfaces.","title":"Ethernet, Wireless, and Cellular Settings"},{"location":"gateway-configuration/gateway-status/#position-status","text":"This section provides the GPS status and latest known position (if applicable) including the following details: Longitude - longitude as reported by the PositionService in radians. Latitude - latitude as reported by the PositionService in radians. Altitude - altitude as reported by the PositionService in meters. Warning The status reported in the page may not be synchronized with the real state of the system. In this case, use the Refresh button to updated the values in the page.","title":"Position Status"},{"location":"gateway-configuration/keys-and-certificates/","text":"Keys and Certificates The framework manages directly different key pairs and trusted certificates from different keystores. To simplify the management of such complex objects, the framework provides a dedicated section of its Administrative Web UI, a set of REST APIs for local management and a request handler (KEYS-V1) for cloud remote interaction. Web UI The Certificates List tab in the Security section of the Kura Web UI provides a simple way for the user to get the list of all the managed keys and certificates of the framework: The page allows the user to add a new Keypair or trusted certificate or to delete an existing element. Every key pair or trusted certificate is listed by its alias, identified by the corresponding type and further identified by the keystore that is managing that element. If the user needs to add a new entry to one of the managed KeystoreService instances, can click on the Add button on the top left part of the page. The user will be guided through a process that will allow to identify the type of entry to add: It can be either a: Private/Public Key Pair Trusted Certificate If the user decides to add a key pair, then the wizard will provide a page like the following: Here the user can specify: - Key Store : the KeystoreService instance that will store and maintain the key pair - Storage Alias : the alias that will be used to identify the key pair - Private Key : the private key part of the key pair - Certificate : the public key part of the key pair After clicking on the Apply button, the new entry will be stored in the selected Keystore and listed along the other entries managed by the framework. The following cryptographic algorithms are supported for Key Pairs : - RSA - DSA Instead, if the user wants to load a Trusted Certificate, the Ui will change as follows: Here the user can specify: - Key Store : the KeystoreService instance that will store and maintain the trusted certificate - Storage Alias : the alias that will be used to identify the trusted certificate - Certificate : the trusted certificate The following cryptographic algorithms are supported for Trusted Certificates : - RSA - DSA - EC REST APIs The org.eclipse.kura.core.keystore bundle exposes a REST endpoint under the /services/keystores/v1 path. The Kura REST APIs for Keys and Certificates support the following calls and are allowed to any user with rest.keystores permission. Method Path Roles allowed Encoding Request parameters Description GET / keystores JSON None Returns the list of all the KeystoreService instances. GET /entries keystores JSON None Returns the list of all the entries managed by the KeystoreService instances. GET /entries?keystoreServicePid={keystoreServicePid} keystores JSON keystoreServicePid Returns the list of all the entries managed by the specified KeystoreService instance. GET /entries?alias={alias} keystores JSON alias Returns the list of all the entries specified by the defined alias and managed in all the available KeystoreService instances in the framework. GET /entries/entry?keystoreServicePid={keystoreServicePid}&alias={alias} keystores JSON keystoreServicePid and alias Returns the entry identified by the specified keystoreServicePid and alias. POST /entries/csr keystores JSON The reference to the key pair in a specified KeystoreService instance that will be used to generate the CSR. The request has to be associated with additional parameters that identify the algorithm used to compute and sign the CSR and the DN or the corresponding public key that needs to be countersigned. Generates a CSR for the specified key pair in the specified KeystoreService instance, based on the parameters provided in the request. POST /entries/certificate keystores JSON The reference to the KeystoreService instance and the alias that will be used for storage. A type filed identifies the type of key that needs to be managed. This request allows the user to upload a TrustedCertificate. POST /entries/keypair keystores JSON To generate a new KeyPair directly in the device, the request format need to follow the references in the following paragraphs. This request allows the user to generate a new KeyPair into the device. DELETE /entries keystores JSON A JSON identifying the resource to delete. The format of the request is described in in one of the following sections. Deletes the entry in the specified KeystoreService instance. List All the KeystoreServices Request : URL - https://<gateway-ip>/services/keystores/v1 Response : [ { \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.SSLKeystore\" , \"type\" : \"jks\" , \"size\" : 4 }, { \"keystoreServicePid\" : \"org.eclipse.kura.crypto.CryptoService\" , \"type\" : \"jks\" , \"size\" : 3 }, { \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.HttpsKeystore\" , \"type\" : \"jks\" , \"size\" : 1 }, { \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.DMKeystore\" , \"type\" : \"jks\" , \"size\" : 1 } ] Get all the Managed Entries Request : URL - https://<gateway-ip>/services/keystores/v1/entries Response : [ { \"subjectDN\" : \"OU=Go Daddy Class 2 Certification Authority, O=\\\"The Go Daddy Group, Inc.\\\", C=US\" , \"issuer\" : \"OU=Go Daddy Class 2 Certification Authority,O=The Go Daddy Group\\\\, Inc.,C=US\" , \"startDate\" : \"Tue, 29 Jun 2004 17:06:20 GMT\" , \"expirationDate\" : \"Thu, 29 Jun 2034 17:06:20 GMT\" , \"algorithm\" : \"SHA1withRSA\" , \"size\" : 2048 , \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.SSLKeystore\" , \"alias\" : \"ca-godaddyclass2ca\" , \"type\" : \"TRUSTED_CERTIFICATE\" }, { \"algorithm\" : \"RSA\" , \"size\" : 4096 , \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.HttpsKeystore\" , \"alias\" : \"localhost\" , \"type\" : \"PRIVATE_KEY\" } ] Get All the Entries by KeystoreService Request : URL - https://<gateway-ip>/services/keystores/v1/entries?keystoreServicePid=org.eclipse.kura.core.keystore.HttpsKeystore Response : [ { \"algorithm\" : \"RSA\" , \"size\" : 4096 , \"certificateChain\" : [ \"-----BEGIN CERTIFICATE-----\\n<CERTIFICATE>\\n-----END CERTIFICATE-----\" ], \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.HttpsKeystore\" , \"alias\" : \"localhost\" , \"type\" : \"PRIVATE_KEY\" } ] Get All the Entries by Alias Request : URL - https://<gateway-ip>/services/keystores/v1/entries?alias=localhost Response : [ { \"algorithm\" : \"RSA\" , \"size\" : 4096 , \"certificateChain\" : [ \"-----BEGIN CERTIFICATE-----\\n<CERTIFICATE>\\n-----END CERTIFICATE-----\" ], \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.HttpsKeystore\" , \"alias\" : \"localhost\" , \"type\" : \"PRIVATE_KEY\" } ] Get Specific Entry Request : URL - https://<gateway-ip>/services/keystores/v1/entries/entry?keystoreServicePid=org.eclipse.kura.core.keystore.HttpsKeystore&alias=localhost Response : { \"algorithm\" : \"RSA\" , \"size\" : 4096 , \"certificateChain\" : [ \"-----BEGIN CERTIFICATE-----\\n<CERTIFICATE>-----END CERTIFICATE-----\" ], \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.HttpsKeystore\" , \"alias\" : \"localhost\" , \"type\" : \"PRIVATE_KEY\" } Get the CSR for a KeyPair Request : URL - https://<gateway-ip>/services/keystores/v1/entries/csr keystoreServicePid=org.eclipse.kura.core.keystore.HttpsKeystore&alias=localhost` Request body : { \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.HttpsKeystore\" , \"alias\" : \"localhost\" , \"signatureAlgorithm\" : \"SHA256withRSA\" , \"attributes\" : \"CN=Kura, OU=IoT, O=Eclipse, C=US\" } Store Trusted Certificate Request : URL - https://<gateway-ip>/services/keystores/v1/entries/certificate Request body : { \"keystoreServicePid\" : \"MyKeystore\" , \"alias\" : \"myCertTest99\" , \"certificate\" : \"-----BEGIN CERTIFICATE----- <CERTIFICATE> -----END CERTIFICATE-----\" } Generate KeyPair Request : URL - https://<gateway-ip>/services/keystores/v1/entries/keypair Request body : { \"keystoreServicePid\" : \"MyKeystore\" , \"alias\" : \"keypair1\" , \"algorithm\" : \"RSA\" , \"size\" : 1024 , \"signatureAlgorithm\" : \"SHA256WithRSA\" , \"attributes\" : \"CN=Kura, OU=IoT, O=Eclipse, C=US\" } Delete Entry Request : URL - https://<gateway-ip>/services/keystores/v1/entries Request body : { \"keystoreServicePid\" : \"MyKeystore\" , \"alias\" : \"mycerttestec\" } KEYS-V1 Request Handler Mapping the previously defined REST APIs, the framework exposed to the remote cloud platforms a request handler named KEYS-V1 that allows the remote user to list and manage the keystores, the keys and the certificates in the framework. The request handler exposes also the capability to generate on the edge a CSR that can be countersigned remotely by a trusted CA.","title":"Keys and Certificates"},{"location":"gateway-configuration/keys-and-certificates/#keys-and-certificates","text":"The framework manages directly different key pairs and trusted certificates from different keystores. To simplify the management of such complex objects, the framework provides a dedicated section of its Administrative Web UI, a set of REST APIs for local management and a request handler (KEYS-V1) for cloud remote interaction.","title":"Keys and Certificates"},{"location":"gateway-configuration/keys-and-certificates/#web-ui","text":"The Certificates List tab in the Security section of the Kura Web UI provides a simple way for the user to get the list of all the managed keys and certificates of the framework: The page allows the user to add a new Keypair or trusted certificate or to delete an existing element. Every key pair or trusted certificate is listed by its alias, identified by the corresponding type and further identified by the keystore that is managing that element. If the user needs to add a new entry to one of the managed KeystoreService instances, can click on the Add button on the top left part of the page. The user will be guided through a process that will allow to identify the type of entry to add: It can be either a: Private/Public Key Pair Trusted Certificate If the user decides to add a key pair, then the wizard will provide a page like the following: Here the user can specify: - Key Store : the KeystoreService instance that will store and maintain the key pair - Storage Alias : the alias that will be used to identify the key pair - Private Key : the private key part of the key pair - Certificate : the public key part of the key pair After clicking on the Apply button, the new entry will be stored in the selected Keystore and listed along the other entries managed by the framework. The following cryptographic algorithms are supported for Key Pairs : - RSA - DSA Instead, if the user wants to load a Trusted Certificate, the Ui will change as follows: Here the user can specify: - Key Store : the KeystoreService instance that will store and maintain the trusted certificate - Storage Alias : the alias that will be used to identify the trusted certificate - Certificate : the trusted certificate The following cryptographic algorithms are supported for Trusted Certificates : - RSA - DSA - EC","title":"Web UI"},{"location":"gateway-configuration/keys-and-certificates/#rest-apis","text":"The org.eclipse.kura.core.keystore bundle exposes a REST endpoint under the /services/keystores/v1 path. The Kura REST APIs for Keys and Certificates support the following calls and are allowed to any user with rest.keystores permission. Method Path Roles allowed Encoding Request parameters Description GET / keystores JSON None Returns the list of all the KeystoreService instances. GET /entries keystores JSON None Returns the list of all the entries managed by the KeystoreService instances. GET /entries?keystoreServicePid={keystoreServicePid} keystores JSON keystoreServicePid Returns the list of all the entries managed by the specified KeystoreService instance. GET /entries?alias={alias} keystores JSON alias Returns the list of all the entries specified by the defined alias and managed in all the available KeystoreService instances in the framework. GET /entries/entry?keystoreServicePid={keystoreServicePid}&alias={alias} keystores JSON keystoreServicePid and alias Returns the entry identified by the specified keystoreServicePid and alias. POST /entries/csr keystores JSON The reference to the key pair in a specified KeystoreService instance that will be used to generate the CSR. The request has to be associated with additional parameters that identify the algorithm used to compute and sign the CSR and the DN or the corresponding public key that needs to be countersigned. Generates a CSR for the specified key pair in the specified KeystoreService instance, based on the parameters provided in the request. POST /entries/certificate keystores JSON The reference to the KeystoreService instance and the alias that will be used for storage. A type filed identifies the type of key that needs to be managed. This request allows the user to upload a TrustedCertificate. POST /entries/keypair keystores JSON To generate a new KeyPair directly in the device, the request format need to follow the references in the following paragraphs. This request allows the user to generate a new KeyPair into the device. DELETE /entries keystores JSON A JSON identifying the resource to delete. The format of the request is described in in one of the following sections. Deletes the entry in the specified KeystoreService instance.","title":"REST APIs"},{"location":"gateway-configuration/keys-and-certificates/#list-all-the-keystoreservices","text":"Request : URL - https://<gateway-ip>/services/keystores/v1 Response : [ { \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.SSLKeystore\" , \"type\" : \"jks\" , \"size\" : 4 }, { \"keystoreServicePid\" : \"org.eclipse.kura.crypto.CryptoService\" , \"type\" : \"jks\" , \"size\" : 3 }, { \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.HttpsKeystore\" , \"type\" : \"jks\" , \"size\" : 1 }, { \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.DMKeystore\" , \"type\" : \"jks\" , \"size\" : 1 } ]","title":"List All the KeystoreServices"},{"location":"gateway-configuration/keys-and-certificates/#get-all-the-managed-entries","text":"Request : URL - https://<gateway-ip>/services/keystores/v1/entries Response : [ { \"subjectDN\" : \"OU=Go Daddy Class 2 Certification Authority, O=\\\"The Go Daddy Group, Inc.\\\", C=US\" , \"issuer\" : \"OU=Go Daddy Class 2 Certification Authority,O=The Go Daddy Group\\\\, Inc.,C=US\" , \"startDate\" : \"Tue, 29 Jun 2004 17:06:20 GMT\" , \"expirationDate\" : \"Thu, 29 Jun 2034 17:06:20 GMT\" , \"algorithm\" : \"SHA1withRSA\" , \"size\" : 2048 , \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.SSLKeystore\" , \"alias\" : \"ca-godaddyclass2ca\" , \"type\" : \"TRUSTED_CERTIFICATE\" }, { \"algorithm\" : \"RSA\" , \"size\" : 4096 , \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.HttpsKeystore\" , \"alias\" : \"localhost\" , \"type\" : \"PRIVATE_KEY\" } ]","title":"Get all the Managed Entries"},{"location":"gateway-configuration/keys-and-certificates/#get-all-the-entries-by-keystoreservice","text":"Request : URL - https://<gateway-ip>/services/keystores/v1/entries?keystoreServicePid=org.eclipse.kura.core.keystore.HttpsKeystore Response : [ { \"algorithm\" : \"RSA\" , \"size\" : 4096 , \"certificateChain\" : [ \"-----BEGIN CERTIFICATE-----\\n<CERTIFICATE>\\n-----END CERTIFICATE-----\" ], \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.HttpsKeystore\" , \"alias\" : \"localhost\" , \"type\" : \"PRIVATE_KEY\" } ]","title":"Get All the Entries by KeystoreService"},{"location":"gateway-configuration/keys-and-certificates/#get-all-the-entries-by-alias","text":"Request : URL - https://<gateway-ip>/services/keystores/v1/entries?alias=localhost Response : [ { \"algorithm\" : \"RSA\" , \"size\" : 4096 , \"certificateChain\" : [ \"-----BEGIN CERTIFICATE-----\\n<CERTIFICATE>\\n-----END CERTIFICATE-----\" ], \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.HttpsKeystore\" , \"alias\" : \"localhost\" , \"type\" : \"PRIVATE_KEY\" } ]","title":"Get All the Entries by Alias"},{"location":"gateway-configuration/keys-and-certificates/#get-specific-entry","text":"Request : URL - https://<gateway-ip>/services/keystores/v1/entries/entry?keystoreServicePid=org.eclipse.kura.core.keystore.HttpsKeystore&alias=localhost Response : { \"algorithm\" : \"RSA\" , \"size\" : 4096 , \"certificateChain\" : [ \"-----BEGIN CERTIFICATE-----\\n<CERTIFICATE>-----END CERTIFICATE-----\" ], \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.HttpsKeystore\" , \"alias\" : \"localhost\" , \"type\" : \"PRIVATE_KEY\" }","title":"Get Specific Entry"},{"location":"gateway-configuration/keys-and-certificates/#get-the-csr-for-a-keypair","text":"Request : URL - https://<gateway-ip>/services/keystores/v1/entries/csr keystoreServicePid=org.eclipse.kura.core.keystore.HttpsKeystore&alias=localhost` Request body : { \"keystoreServicePid\" : \"org.eclipse.kura.core.keystore.HttpsKeystore\" , \"alias\" : \"localhost\" , \"signatureAlgorithm\" : \"SHA256withRSA\" , \"attributes\" : \"CN=Kura, OU=IoT, O=Eclipse, C=US\" }","title":"Get the CSR for a KeyPair"},{"location":"gateway-configuration/keys-and-certificates/#store-trusted-certificate","text":"Request : URL - https://<gateway-ip>/services/keystores/v1/entries/certificate Request body : { \"keystoreServicePid\" : \"MyKeystore\" , \"alias\" : \"myCertTest99\" , \"certificate\" : \"-----BEGIN CERTIFICATE----- <CERTIFICATE> -----END CERTIFICATE-----\" }","title":"Store Trusted Certificate"},{"location":"gateway-configuration/keys-and-certificates/#generate-keypair","text":"Request : URL - https://<gateway-ip>/services/keystores/v1/entries/keypair Request body : { \"keystoreServicePid\" : \"MyKeystore\" , \"alias\" : \"keypair1\" , \"algorithm\" : \"RSA\" , \"size\" : 1024 , \"signatureAlgorithm\" : \"SHA256WithRSA\" , \"attributes\" : \"CN=Kura, OU=IoT, O=Eclipse, C=US\" }","title":"Generate KeyPair"},{"location":"gateway-configuration/keys-and-certificates/#delete-entry","text":"Request : URL - https://<gateway-ip>/services/keystores/v1/entries Request body : { \"keystoreServicePid\" : \"MyKeystore\" , \"alias\" : \"mycerttestec\" }","title":"Delete Entry"},{"location":"gateway-configuration/keys-and-certificates/#keys-v1-request-handler","text":"Mapping the previously defined REST APIs, the framework exposed to the remote cloud platforms a request handler named KEYS-V1 that allows the remote user to list and manage the keystores, the keys and the certificates in the framework. The request handler exposes also the capability to generate on the edge a CSR that can be countersigned remotely by a trusted CA.","title":"KEYS-V1 Request Handler"},{"location":"gateway-configuration/keystores-management/","text":"Keystores Management The framework manages different types of cryptographic keys and certificates. In order to simplify the interaction with those objects, Kura provides a KeystoreService API and a specific section in the Kura Web UI that lists all the available KeystoreService instances. From the Security section, a user with Security permissions can access the Keystore Configuration section. A list of all the framework managed keystores will be available to the user with the Service PID that will be used by other components to reference the selected keystore. Associated to the Service PID, the UI shows the Factory PID that identifies the specific KeystoreService API implementation that is providing the service to the framework. In order to modify the configuration of a specific keystore service instance, the user can select one of the available rows, obtaining the corresponding keystore service configuration. The following KeystoreService factories are available: FilesystemKeystoreServiceImpl The org.eclipse.kura.core.keystore.FilesystemKeystoreServiceImpl factory provides a KeystoreService implementation that stores the private keys and certificates as a file. The user can customise the following options: Keystore Path : identifies the path in the filesystem. If the keystore file does not exists, a new file will be created. The value cannot be empty. Keystore Password : the corresponding keystore password. Randomize Password : a boolean flag that allows the user to specify if the keystore password needs to be randomised at the next framework boot. If set true , the framework will try to access the identified keystore and randomise the password. The new password will be persisted in the framework snapshot. Once successfully randomised, the flag will be automatically set to false by the framework. PKCS11KeystoreServiceImpl The org.eclipse.kura.core.keystore.PKCS11KeystoreServiceImpl factory provides a KeystoreService implementation that allows to access a PKCS11 token through the SunPKCS11 implementation. At the moment this type of KeystoreService provides read only access to the underlying token, operations such as adding or removing entries will fail. It is possible to use the entries provided by a PKCS11KeystoreServiceImpl for SSL authentication. The available configuration options closely match the parameters provided by the SunPKCS11 implementation, see the official documentation for more details. In particular, the official documentation contains a section that explains how the PKCS11 objects are mapped to Java KeyStore entries. The only required parameter is the PKCS11 Implementation Library Path parameter. It is usually also necessary to specify the token user pin as the Pin parameter. The configuration parameters are mapped to the SunPKCS11 provider parameters in the following way: Kura Parameter SunPKCS11 Parameter Notes Slot slot Slot List Index slotListIndex Enabled Mechanisms enabledMechanisms The curly braces must be omitted Disabled Mechanisms disabledMechanisms The curly braces must be omitted. Attributes attributes The value of this field will be appended to the provider configuration.","title":"Keystores Management"},{"location":"gateway-configuration/keystores-management/#keystores-management","text":"The framework manages different types of cryptographic keys and certificates. In order to simplify the interaction with those objects, Kura provides a KeystoreService API and a specific section in the Kura Web UI that lists all the available KeystoreService instances. From the Security section, a user with Security permissions can access the Keystore Configuration section. A list of all the framework managed keystores will be available to the user with the Service PID that will be used by other components to reference the selected keystore. Associated to the Service PID, the UI shows the Factory PID that identifies the specific KeystoreService API implementation that is providing the service to the framework. In order to modify the configuration of a specific keystore service instance, the user can select one of the available rows, obtaining the corresponding keystore service configuration. The following KeystoreService factories are available:","title":"Keystores Management"},{"location":"gateway-configuration/keystores-management/#filesystemkeystoreserviceimpl","text":"The org.eclipse.kura.core.keystore.FilesystemKeystoreServiceImpl factory provides a KeystoreService implementation that stores the private keys and certificates as a file. The user can customise the following options: Keystore Path : identifies the path in the filesystem. If the keystore file does not exists, a new file will be created. The value cannot be empty. Keystore Password : the corresponding keystore password. Randomize Password : a boolean flag that allows the user to specify if the keystore password needs to be randomised at the next framework boot. If set true , the framework will try to access the identified keystore and randomise the password. The new password will be persisted in the framework snapshot. Once successfully randomised, the flag will be automatically set to false by the framework.","title":"FilesystemKeystoreServiceImpl"},{"location":"gateway-configuration/keystores-management/#pkcs11keystoreserviceimpl","text":"The org.eclipse.kura.core.keystore.PKCS11KeystoreServiceImpl factory provides a KeystoreService implementation that allows to access a PKCS11 token through the SunPKCS11 implementation. At the moment this type of KeystoreService provides read only access to the underlying token, operations such as adding or removing entries will fail. It is possible to use the entries provided by a PKCS11KeystoreServiceImpl for SSL authentication. The available configuration options closely match the parameters provided by the SunPKCS11 implementation, see the official documentation for more details. In particular, the official documentation contains a section that explains how the PKCS11 objects are mapped to Java KeyStore entries. The only required parameter is the PKCS11 Implementation Library Path parameter. It is usually also necessary to specify the token user pin as the Pin parameter. The configuration parameters are mapped to the SunPKCS11 provider parameters in the following way: Kura Parameter SunPKCS11 Parameter Notes Slot slot Slot List Index slotListIndex Enabled Mechanisms enabledMechanisms The curly braces must be omitted Disabled Mechanisms disabledMechanisms The curly braces must be omitted. Attributes attributes The value of this field will be appended to the provider configuration.","title":"PKCS11KeystoreServiceImpl"},{"location":"gateway-configuration/network-configuration/","text":"Network Configuration To configure the gateway network interfaces using the Gateway Administration Console, select the Network option located in the System area. With this option selected, the Network display appears with a list of available interfaces. Configuration tabs for the selected interface appear on the right side of the screen. By default, the loopback (lo) interface is selected when the network interfaces are displayed. Choose the desired network interface (e.g., eth0, eth1, wlan0, ppp0) and apply the necessary configuration changes using the tabs on the right. Submit the modified configuration by clicking the Apply button. In case of typing errors, the Reset button can be used to reload the prior configuration on the screen. Since the network configuration shown on the screen may not be synchronized with the current state of the system, it can be updated pressing the Refresh button. This can be used also to force the reload of specific parameters like the RSSI or dynamic IP addresses. The refresh procedure reads all the needed parameters from the system and can take several seconds before updating. Tip It is recommended that the TCP/IP tab is configured first since it defines how the interface is going to be used. TCP/IP Configuration The TCP/IP tab contains the following configuration parameters: Status Disabled: disables the selected interface (i.e., administratively down). Enabled for LAN: designates the interface for a local network. It can be set as a DHCP server for hosts on the local network and can serve as a default gateway for those hosts; however, it cannot be set as an actual gateway interface for this device. That is, packets must be routed from this interface to another interface that is configured as WAN. The interface is automatically brought up at boot. Enabled for WAN: designates the interface as a gateway to an external network. The interface is automatically brought up at boot. Not Managed: the interface will be ignored by Kura. Layer 2 Only: only the Layer 2 portion of the interface will be configured. The interface is automatically brought up at boot. Configure Manually: allows manual entry of the IP Address and Netmask fields, if the interface is configured as LAN; allows manual entry of the IP Address , Netmask , Gateway , and DNS Servers fields, if the interface is designated as WAN. Using DHCP: configures the interface as a DHCP client obtaining the IP address from a network DHCP server. IP Address - defines the IP address of the interface, if manually configured. Subnet Mask - defines the subnet mask of the interface, if manually configured. Gateway - specifies the default gateway for the unit. (Required field if the interface is designated as WAN and manually configured.) DNS Servers - provides a list of DNS servers, if the interface is designated as WAN and is manually configured. Search Domains - Not implemented. If the network interface is Enabled for LAN and manually configured (i.e., not a DHCP client), the DHCP & NAT tab allows the DHCP server to be configured and/or NAT (IP forwarding with masquerading) to be enabled. DHCP & NAT Configuration The DHCP & NAT tab contains the following configuration parameters: Router Mode DHCP and NAT: indicates that both DHCP server and NAT are enabled. DHCP Only: indicates that DHCP server is enabled and NAT is disabled. NAT Only: indicates that NAT is enabled and DHCP server is disabled. Off: indicates that both DHCP server and NAT are disabled. DHCP Beginning Address : specifies the first address of DHCP pool (i.e., first available client IP address). DHCP Ending Address : specifies the last address of DHCP pool (i.e., last IP address that can be assigned to a client). DHCP Subnet Mask : defines the subnet mask that is assigned to a client. DHCP Default Lease Time : sets the default time (in minutes) that the client retains the provided IP address. It must be greater than 0. DHCP Max Lease Time : sets the maximum time (in minutes) that the client retains the provided IP address. It must be greater than 0. Pass DNS Servers through DHCP : enables DNS Proxy (i.e., passing DNS servers through DHCP). If NAT is enabled and there is another interface designated as WAN (e.g., ppp0), the following iptables rules are added to the custom automatic NAT service rules _* section of the /etc/init.d/firewall script: # custom automatic NAT service rules (if NAT option is enabled for LAN interface) iptables -t nat -A POSTROUTING -o ppp0 -j MASQUERADE iptables -A FORWARD -i ppp0 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT iptables -A FORWARD -i eth0 -o ppp0 -j ACCEPT Also, IP forwarding is enabled in the kernel as follows: # allow fowarding if any masquerade is defined echo 1 > /proc/sys/net/ipv4/ip_forward The rules shown above create an Overloaded _ (i.e., many-to-one) NAT. This type of network address translation maps multiple IP addresses on the LAN side to a single IP address on the WAN side, allowing internet access from hosts on a local network via a gateway (WAN) interface. Note that for NAT rules to be added, it is insufficient to enable NATing through the DHCP & NAT * tab of the LAN interface; there must also be another interface designated as WAN. Network Linux Configuration When applying a new network configuration, Kura changes the configuration files of the Linux networking subsystem. Please read the following note before proceeding with manual changes of the Linux networking configuration. Warning It is NOT recommended performing manual editing of the Linux networking configuration files when the gateway configuration is being managed through Kura. While Linux may correctly accept manual changes, Kura may not be able to interpret the new configuration resulting in an inconsistent state. Network Configuration properties The Network configuration can be modified using the Kura Gateway Administration Console, as described above, the Configuration Service or appling a proper snapshot . The following table describes all the properties related to the Network Configuration. The network configuration pid is org.eclipse.kura.net.admin.NetworkConfigurationService . Common properties Name Type Description net.interfaces String Comma-separated list of the interface names in the device net.interface.\\<interface\\>.config.type String The type of the network interface; possible values are: ETHERNET, WIFI, MODEM and LOOPBACK net.interface.\\<interface\\>.config.wifi.mode String For wifi interfaces, specify the modality; possible values are INFRA and MASTER net.interface.\\<interface\\>.config.nat.enabled Boolean Enable the NAT feature IPv4 properties Name Type Description net.interface.\\<interface\\>.config.ip4.status String The status of the interface for the IPv4 configuration; possibile values are: netIPv4StatusDisabled, netIPv4StatusUnmanaged, netIPv4StatusL2Only, netIPv4StatusEnabledLAN, netIPv4StatusEnabledWAN, netIPv4StatusUnknown net.interface.\\<interface\\>.config.ip4.address String The IPv4 address assigned to the network interface net.interface.\\<interface\\>.config.ip4.prefix Short The IPv4 netmask assigned to the network interface net.interface.\\<interface\\>.config.ip4.gateway String The IPv4 address of the default gateway net.interface.\\<interface\\>.config.ip4.dnsServers String Comma-separated list of dns servers IPv4 DHCP Server properties Name Type Description net.interface.\\<interface\\>.config.dhcpServer4.enabled Boolean Specify if the DHCP server is enabled net.interface.\\<interface\\>.config.dhcpServer4.rangeStart String First IP address available for clients net.interface.\\<interface\\>.config.dhcpServer4.rangeEnd String Last IP address available for clients net.interface.\\<interface\\>.config.dhcpServer4.defaultLeaseTime Integer The default lease time net.interface.\\<interface\\>.config.dhcpServer4.maxLeaseTime Integer The maximum lease time net.interface.\\<interface\\>.config.dhcpServer4.prefix Short The netmask for the available IP addresses net.interface.\\<interface\\>.config.dhcpServer4.passDns Boolean Specify if the DNS server addresses has to be passed through DHCP IPv4 DHCP Client properties Name Type Description net.interface.\\<interface\\>.config.dhcpClient4.enabled Boolean Specify if the DHCP client is enabled WiFi Master (Access Point) properties Name Type Description net.interface.\\<interface\\>.config.wifi.master.driver String The driver used for the connection net.interface.\\<interface\\>.config.wifi.master.passphrase Password The password for the access point net.interface.\\<interface\\>.config.wifi.master.ssid String The SSID of the access point net.interface.\\<interface\\>.config.wifi.master.securityType String The security protocol for the wireless network; possible values are SECURITY_NONE, SECURITY_WEP, SECURITY_WPA, SECURITY_WPA2, SECURITY_WPA_WPA2 net.interface.\\<interface\\>.config.wifi.master.mode String The mode of the wireless connection; for the access point mode set it to MASTER net.interface.\\<interface\\>.config.wifi.master.channel String The channel to be used for the access point net.interface.\\<interface\\>.config.wifi.master.radioMode String Specify the 802.11 radio mode; possible values are RADIO_MODE_80211a, RADIO_MODE_80211b, RADIO_MODE_80211g, RADIO_MODE_80211nHT20, RADIO_MODE_80211_AC net.interface.\\<interface\\>.config.wifi.master.ignoreSSID Boolean Specify if the SSID broadcast is ignored WiFi Infra (Station Mode) properties Name Type Description net.interface.\\<interface\\>.config.wifi.infra.ssid String The SSID of the wireless network to connect to net.interface.\\<interface\\>.config.wifi.infra.channel String The channel of the wireless network to connect to net.interface.\\<interface\\>.config.wifi.infra.bgscan String Set the background scans; possible values are None, Simple and Learn net.interface.\\<interface\\>.config.wifi.infra.passphrase Password The password for the wireless network net.interface.\\<interface\\>.config.wifi.infra.ignoreSSID Boolean Specify if a scan for SSID is required before attempting to associate net.interface.\\<interface\\>.config.wifi.infra.mode String The mode of the wireless connection; for station mode set to INFRA net.interface.\\<interface\\>.config.wifi.infra.pingAccessPoint Boolean Enable pinging the access point after connection is established net.interface.\\<interface\\>.config.wifi.infra.driver String The driver used for the connection net.interface.\\<interface\\>.config.wifi.infra.securityType String The security protocol for the wireless network; possible values are SECURITY_NONE, SECURITY_WEP, SECURITY_WPA, SECURITY_WPA2, SECURITY_WPA_WPA2 Cellular Modem properties Name Type Description net.interface.\\<interface\\>.config.enabled Boolean Enable the interface net.interface.\\<interface\\>.config.idle Integer The idle option of the PPP daemon net.interface.\\<interface\\>.config.password Password The password used for the connection net.interface.\\<interface\\>.config.pdpType String The PdP type; possible values are IP, PPP and IPv6 net.interface.\\<interface\\>.config.maxFail Integer The maxfail option of the PPP daemon net.interface.\\<interface\\>.config.authType String The authentication type; possible values are None, Auto, CHAP and PAP net.interface.\\<interface\\>.config.lpcEchoInterval Integer the lcp-echo-interval option of the PPP daemon net.interface.\\<interface\\>.config.activeFilter String The active-filter option of the PPP daemon net.interface.\\<interface\\>.config.lpcEchoFailure Integer The lcp-echo-failure option of the PPP daemon net.interface.\\<interface\\>.config.diversityEnabled Boolean Enable the LTE diversity antenna net.interface.\\<interface\\>.config.resetTimeout Integer The modem reset timeout in minutes net.interface.\\<interface\\>.config.gpsEnabled Boolean Enable the GPS device in the modem if available net.interface.\\<interface\\>.config.persist Boolean The persist option of the PPP daemon net.interface.\\<interface\\>.config.apn String The modem Access Point Name net.interface.\\<interface\\>.config.dialString String The dial string used for connecting to the APN Network Configuration recipes This section presents some snapshot examples to perform basic operations on networking. The snippets can be modified adapting them to the required configuration (i.e. changing the interface name in the property to be applied). Warning Be aware that an inconsitent or wrong configuration can compromise the network functionality of the gateway. Try the new configuration on a test device before appling it in a production environment! Moreover, if a property is not present in the new snapshot, the old value is used for the configuration. So, the best practice is to set all the needed properties in the snapshot. Disable a network interface <?xml version=\"1.0\" encoding=\"UTF-8\"?> <esf:configurations xmlns:esf= \"http://eurotech.com/esf/2.0\" xmlns:ocd= \"http://www.osgi.org/xmlns/metatype/v1.2.0\" > <esf:configuration pid= \"org.eclipse.kura.net.admin.NetworkConfigurationService\" > <esf:properties> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.type\" type= \"String\" > <esf:value> ETHERNET </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.status\" type= \"String\" > <esf:value> netIPv4StatusDisabled </esf:value> </esf:property> </esf:properties> </esf:configuration> </esf:configurations> Configure an ethernet interface for WAN with DHCP client enabled and custom DNS server <?xml version=\"1.0\" encoding=\"UTF-8\"?> <esf:configurations xmlns:esf= \"http://eurotech.com/esf/2.0\" xmlns:ocd= \"http://www.osgi.org/xmlns/metatype/v1.2.0\" > <esf:configuration pid= \"org.eclipse.kura.net.admin.NetworkConfigurationService\" > <esf:properties> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.type\" type= \"String\" > <esf:value> ETHERNET </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.dnsServers\" type= \"String\" > <esf:value> 1.2.3.4 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpClient4.enabled\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.enabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.status\" type= \"String\" > <esf:value> netIPv4StatusEnabledWAN </esf:value> </esf:property> </esf:properties> </esf:configuration> </esf:configurations> Configure an ethernet interface for LAN with DHCP server enabled and NAT disabled <?xml version=\"1.0\" encoding=\"UTF-8\"?> <esf:configurations xmlns:esf= \"http://eurotech.com/esf/2.0\" xmlns:ocd= \"http://www.osgi.org/xmlns/metatype/v1.2.0\" > <esf:configuration pid= \"org.eclipse.kura.net.admin.NetworkConfigurationService\" > <esf:properties> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.type\" type= \"String\" > <esf:value> ETHERNET </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.dnsServers\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpClient4.enabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.status\" type= \"String\" > <esf:value> netIPv4StatusEnabledLAN </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.rangeEnd\" type= \"String\" > <esf:value> 192.168.4.110 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.enabled\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.defaultLeaseTime\" type= \"Integer\" > <esf:value> 900 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.prefix\" type= \"Short\" > <esf:value> 24 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.passDns\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.rangeStart\" type= \"String\" > <esf:value> 192.168.4.100 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.maxLeaseTime\" type= \"Integer\" > <esf:value> 900 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.address\" type= \"String\" > <esf:value> 192.168.4.1 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.prefix\" type= \"Short\" > <esf:value> 24 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.gateway\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.nat.enabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> </esf:properties> </esf:configuration> </esf:configurations> Configure a wireless interface as access point with DHCP server and NAT enabled <?xml version=\"1.0\" encoding=\"UTF-8\"?> <esf:configurations xmlns:esf= \"http://eurotech.com/esf/2.0\" xmlns:ocd= \"http://www.osgi.org/xmlns/metatype/v1.2.0\" > <esf:configuration pid= \"org.eclipse.kura.net.admin.NetworkConfigurationService\" > <esf:properties> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.type\" type= \"String\" > <esf:value> WIFI </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.ip4.status\" type= \"String\" > <esf:value> netIPv4StatusEnabledLAN </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.ip4.gateway\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.ip4.dnsServers\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.ip4.prefix\" type= \"Short\" > <esf:value> 24 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.ip4.address\" type= \"String\" > <esf:value> 172.16.1.1 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpClient4.enabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.rangeStart\" type= \"String\" > <esf:value> 172.16.1.100 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.maxLeaseTime\" type= \"Integer\" > <esf:value> 900 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.defaultLeaseTime\" type= \"Integer\" > <esf:value> 900 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.rangeEnd\" type= \"String\" > <esf:value> 172.16.1.110 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.prefix\" type= \"Short\" > <esf:value> 24 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.enabled\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.passDns\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.nat.enabled\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.mode\" type= \"String\" > <esf:value> MASTER </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.driver\" type= \"String\" > <esf:value> nl80211 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"true\" name= \"net.interface.wlp1s0.config.wifi.master.passphrase\" type= \"Password\" > <esf:value> ZW5hYmxlbWVwbGVhc2U= </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.ssid\" type= \"String\" > <esf:value> kura_gateway_19 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.securityType\" type= \"String\" > <esf:value> SECURITY_WPA2 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.mode\" type= \"String\" > <esf:value> MASTER </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.channel\" type= \"String\" > <esf:value> 11 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.radioMode\" type= \"String\" > <esf:value> RADIO_MODE_80211g </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.ignoreSSID\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.pairwiseCiphers\" type= \"String\" > <esf:value> CCMP </esf:value> </esf:property> </esf:properties> </esf:configuration> </esf:configurations> Configure a wireless interface as station mode with DHCP client enabled <?xml version=\"1.0\" encoding=\"UTF-8\"?> <esf:configurations xmlns:esf= \"http://eurotech.com/esf/2.0\" xmlns:ocd= \"http://www.osgi.org/xmlns/metatype/v1.2.0\" > <esf:configuration pid= \"org.eclipse.kura.net.admin.NetworkConfigurationService\" > <esf:properties> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.type\" type= \"String\" > <esf:value> WIFI </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.ip4.status\" type= \"String\" > <esf:value> netIPv4StatusEnabledLAN </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.ip4.dnsServers\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpClient4.enabled\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.enabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.mode\" type= \"String\" > <esf:value> INFRA </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.infra.ssid\" type= \"String\" > <esf:value> MyWirelessNetwork </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.infra.bgscan\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"true\" name= \"net.interface.wlp1s0.config.wifi.infra.passphrase\" type= \"Password\" > <esf:value> MyPasswordBase64 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.infra.ignoreSSID\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.infra.mode\" type= \"String\" > <esf:value> INFRA </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.infra.pingAccessPoint\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.infra.driver\" type= \"String\" > <esf:value> nl80211 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.infra.securityType\" type= \"String\" > <esf:value> SECURITY_WPA2 </esf:value> </esf:property> </esf:properties> </esf:configuration> </esf:configurations> Enable a cellular interface <?xml version=\"1.0\" encoding=\"UTF-8\"?> <esf:configurations xmlns:esf= \"http://eurotech.com/esf/2.0\" xmlns:ocd= \"http://www.osgi.org/xmlns/metatype/v1.2.0\" > <esf:configuration pid= \"org.eclipse.kura.net.admin.NetworkConfigurationService\" > <esf:properties> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.type\" type= \"String\" > <esf:value> MODEM </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.ip4.status\" type= \"String\" > <esf:value> netIPv4StatusEnabledWAN </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.ip4.dnsServers\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.dhcpClient4.enabled\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.dhcpServer4.enabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.idle\" type= \"Integer\" > <esf:value> 95 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"true\" name= \"net.interface.1-1.config.password\" type= \"Password\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.pdpType\" type= \"String\" > <esf:value> IP </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.ipAddress\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.maxFail\" type= \"Integer\" > <esf:value> 5 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.authType\" type= \"String\" > <esf:value> NONE </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.lcpEchoInterval\" type= \"Integer\" > <esf:value> 0 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.enabled\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.activeFilter\" type= \"String\" > <esf:value> inbound </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.lcpEchoFailure\" type= \"Integer\" > <esf:value> 0 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.diversityEnabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.resetTimeout\" type= \"Integer\" > <esf:value> 5 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.gpsEnabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.persist\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.dialString\" type= \"String\" > <esf:value> atd*99***2# </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.apn\" type= \"String\" > <esf:value> web.omnitel.it </esf:value> </esf:property> </esf:properties> </esf:configuration> </esf:configurations>","title":"Network Configuration"},{"location":"gateway-configuration/network-configuration/#network-configuration","text":"To configure the gateway network interfaces using the Gateway Administration Console, select the Network option located in the System area. With this option selected, the Network display appears with a list of available interfaces. Configuration tabs for the selected interface appear on the right side of the screen. By default, the loopback (lo) interface is selected when the network interfaces are displayed. Choose the desired network interface (e.g., eth0, eth1, wlan0, ppp0) and apply the necessary configuration changes using the tabs on the right. Submit the modified configuration by clicking the Apply button. In case of typing errors, the Reset button can be used to reload the prior configuration on the screen. Since the network configuration shown on the screen may not be synchronized with the current state of the system, it can be updated pressing the Refresh button. This can be used also to force the reload of specific parameters like the RSSI or dynamic IP addresses. The refresh procedure reads all the needed parameters from the system and can take several seconds before updating. Tip It is recommended that the TCP/IP tab is configured first since it defines how the interface is going to be used.","title":"Network Configuration"},{"location":"gateway-configuration/network-configuration/#tcpip-configuration","text":"The TCP/IP tab contains the following configuration parameters: Status Disabled: disables the selected interface (i.e., administratively down). Enabled for LAN: designates the interface for a local network. It can be set as a DHCP server for hosts on the local network and can serve as a default gateway for those hosts; however, it cannot be set as an actual gateway interface for this device. That is, packets must be routed from this interface to another interface that is configured as WAN. The interface is automatically brought up at boot. Enabled for WAN: designates the interface as a gateway to an external network. The interface is automatically brought up at boot. Not Managed: the interface will be ignored by Kura. Layer 2 Only: only the Layer 2 portion of the interface will be configured. The interface is automatically brought up at boot. Configure Manually: allows manual entry of the IP Address and Netmask fields, if the interface is configured as LAN; allows manual entry of the IP Address , Netmask , Gateway , and DNS Servers fields, if the interface is designated as WAN. Using DHCP: configures the interface as a DHCP client obtaining the IP address from a network DHCP server. IP Address - defines the IP address of the interface, if manually configured. Subnet Mask - defines the subnet mask of the interface, if manually configured. Gateway - specifies the default gateway for the unit. (Required field if the interface is designated as WAN and manually configured.) DNS Servers - provides a list of DNS servers, if the interface is designated as WAN and is manually configured. Search Domains - Not implemented. If the network interface is Enabled for LAN and manually configured (i.e., not a DHCP client), the DHCP & NAT tab allows the DHCP server to be configured and/or NAT (IP forwarding with masquerading) to be enabled.","title":"TCP/IP Configuration"},{"location":"gateway-configuration/network-configuration/#dhcp-nat-configuration","text":"The DHCP & NAT tab contains the following configuration parameters: Router Mode DHCP and NAT: indicates that both DHCP server and NAT are enabled. DHCP Only: indicates that DHCP server is enabled and NAT is disabled. NAT Only: indicates that NAT is enabled and DHCP server is disabled. Off: indicates that both DHCP server and NAT are disabled. DHCP Beginning Address : specifies the first address of DHCP pool (i.e., first available client IP address). DHCP Ending Address : specifies the last address of DHCP pool (i.e., last IP address that can be assigned to a client). DHCP Subnet Mask : defines the subnet mask that is assigned to a client. DHCP Default Lease Time : sets the default time (in minutes) that the client retains the provided IP address. It must be greater than 0. DHCP Max Lease Time : sets the maximum time (in minutes) that the client retains the provided IP address. It must be greater than 0. Pass DNS Servers through DHCP : enables DNS Proxy (i.e., passing DNS servers through DHCP). If NAT is enabled and there is another interface designated as WAN (e.g., ppp0), the following iptables rules are added to the custom automatic NAT service rules _* section of the /etc/init.d/firewall script: # custom automatic NAT service rules (if NAT option is enabled for LAN interface) iptables -t nat -A POSTROUTING -o ppp0 -j MASQUERADE iptables -A FORWARD -i ppp0 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT iptables -A FORWARD -i eth0 -o ppp0 -j ACCEPT Also, IP forwarding is enabled in the kernel as follows: # allow fowarding if any masquerade is defined echo 1 > /proc/sys/net/ipv4/ip_forward The rules shown above create an Overloaded _ (i.e., many-to-one) NAT. This type of network address translation maps multiple IP addresses on the LAN side to a single IP address on the WAN side, allowing internet access from hosts on a local network via a gateway (WAN) interface. Note that for NAT rules to be added, it is insufficient to enable NATing through the DHCP & NAT * tab of the LAN interface; there must also be another interface designated as WAN.","title":"DHCP &amp; NAT Configuration"},{"location":"gateway-configuration/network-configuration/#network-linux-configuration","text":"When applying a new network configuration, Kura changes the configuration files of the Linux networking subsystem. Please read the following note before proceeding with manual changes of the Linux networking configuration. Warning It is NOT recommended performing manual editing of the Linux networking configuration files when the gateway configuration is being managed through Kura. While Linux may correctly accept manual changes, Kura may not be able to interpret the new configuration resulting in an inconsistent state.","title":"Network Linux Configuration"},{"location":"gateway-configuration/network-configuration/#network-configuration-properties","text":"The Network configuration can be modified using the Kura Gateway Administration Console, as described above, the Configuration Service or appling a proper snapshot . The following table describes all the properties related to the Network Configuration. The network configuration pid is org.eclipse.kura.net.admin.NetworkConfigurationService .","title":"Network Configuration properties"},{"location":"gateway-configuration/network-configuration/#common-properties","text":"Name Type Description net.interfaces String Comma-separated list of the interface names in the device net.interface.\\<interface\\>.config.type String The type of the network interface; possible values are: ETHERNET, WIFI, MODEM and LOOPBACK net.interface.\\<interface\\>.config.wifi.mode String For wifi interfaces, specify the modality; possible values are INFRA and MASTER net.interface.\\<interface\\>.config.nat.enabled Boolean Enable the NAT feature","title":"Common properties"},{"location":"gateway-configuration/network-configuration/#ipv4-properties","text":"Name Type Description net.interface.\\<interface\\>.config.ip4.status String The status of the interface for the IPv4 configuration; possibile values are: netIPv4StatusDisabled, netIPv4StatusUnmanaged, netIPv4StatusL2Only, netIPv4StatusEnabledLAN, netIPv4StatusEnabledWAN, netIPv4StatusUnknown net.interface.\\<interface\\>.config.ip4.address String The IPv4 address assigned to the network interface net.interface.\\<interface\\>.config.ip4.prefix Short The IPv4 netmask assigned to the network interface net.interface.\\<interface\\>.config.ip4.gateway String The IPv4 address of the default gateway net.interface.\\<interface\\>.config.ip4.dnsServers String Comma-separated list of dns servers","title":"IPv4 properties"},{"location":"gateway-configuration/network-configuration/#ipv4-dhcp-server-properties","text":"Name Type Description net.interface.\\<interface\\>.config.dhcpServer4.enabled Boolean Specify if the DHCP server is enabled net.interface.\\<interface\\>.config.dhcpServer4.rangeStart String First IP address available for clients net.interface.\\<interface\\>.config.dhcpServer4.rangeEnd String Last IP address available for clients net.interface.\\<interface\\>.config.dhcpServer4.defaultLeaseTime Integer The default lease time net.interface.\\<interface\\>.config.dhcpServer4.maxLeaseTime Integer The maximum lease time net.interface.\\<interface\\>.config.dhcpServer4.prefix Short The netmask for the available IP addresses net.interface.\\<interface\\>.config.dhcpServer4.passDns Boolean Specify if the DNS server addresses has to be passed through DHCP","title":"IPv4 DHCP Server properties"},{"location":"gateway-configuration/network-configuration/#ipv4-dhcp-client-properties","text":"Name Type Description net.interface.\\<interface\\>.config.dhcpClient4.enabled Boolean Specify if the DHCP client is enabled","title":"IPv4 DHCP Client properties"},{"location":"gateway-configuration/network-configuration/#wifi-master-access-point-properties","text":"Name Type Description net.interface.\\<interface\\>.config.wifi.master.driver String The driver used for the connection net.interface.\\<interface\\>.config.wifi.master.passphrase Password The password for the access point net.interface.\\<interface\\>.config.wifi.master.ssid String The SSID of the access point net.interface.\\<interface\\>.config.wifi.master.securityType String The security protocol for the wireless network; possible values are SECURITY_NONE, SECURITY_WEP, SECURITY_WPA, SECURITY_WPA2, SECURITY_WPA_WPA2 net.interface.\\<interface\\>.config.wifi.master.mode String The mode of the wireless connection; for the access point mode set it to MASTER net.interface.\\<interface\\>.config.wifi.master.channel String The channel to be used for the access point net.interface.\\<interface\\>.config.wifi.master.radioMode String Specify the 802.11 radio mode; possible values are RADIO_MODE_80211a, RADIO_MODE_80211b, RADIO_MODE_80211g, RADIO_MODE_80211nHT20, RADIO_MODE_80211_AC net.interface.\\<interface\\>.config.wifi.master.ignoreSSID Boolean Specify if the SSID broadcast is ignored","title":"WiFi Master (Access Point) properties"},{"location":"gateway-configuration/network-configuration/#wifi-infra-station-mode-properties","text":"Name Type Description net.interface.\\<interface\\>.config.wifi.infra.ssid String The SSID of the wireless network to connect to net.interface.\\<interface\\>.config.wifi.infra.channel String The channel of the wireless network to connect to net.interface.\\<interface\\>.config.wifi.infra.bgscan String Set the background scans; possible values are None, Simple and Learn net.interface.\\<interface\\>.config.wifi.infra.passphrase Password The password for the wireless network net.interface.\\<interface\\>.config.wifi.infra.ignoreSSID Boolean Specify if a scan for SSID is required before attempting to associate net.interface.\\<interface\\>.config.wifi.infra.mode String The mode of the wireless connection; for station mode set to INFRA net.interface.\\<interface\\>.config.wifi.infra.pingAccessPoint Boolean Enable pinging the access point after connection is established net.interface.\\<interface\\>.config.wifi.infra.driver String The driver used for the connection net.interface.\\<interface\\>.config.wifi.infra.securityType String The security protocol for the wireless network; possible values are SECURITY_NONE, SECURITY_WEP, SECURITY_WPA, SECURITY_WPA2, SECURITY_WPA_WPA2","title":"WiFi Infra (Station Mode) properties"},{"location":"gateway-configuration/network-configuration/#cellular-modem-properties","text":"Name Type Description net.interface.\\<interface\\>.config.enabled Boolean Enable the interface net.interface.\\<interface\\>.config.idle Integer The idle option of the PPP daemon net.interface.\\<interface\\>.config.password Password The password used for the connection net.interface.\\<interface\\>.config.pdpType String The PdP type; possible values are IP, PPP and IPv6 net.interface.\\<interface\\>.config.maxFail Integer The maxfail option of the PPP daemon net.interface.\\<interface\\>.config.authType String The authentication type; possible values are None, Auto, CHAP and PAP net.interface.\\<interface\\>.config.lpcEchoInterval Integer the lcp-echo-interval option of the PPP daemon net.interface.\\<interface\\>.config.activeFilter String The active-filter option of the PPP daemon net.interface.\\<interface\\>.config.lpcEchoFailure Integer The lcp-echo-failure option of the PPP daemon net.interface.\\<interface\\>.config.diversityEnabled Boolean Enable the LTE diversity antenna net.interface.\\<interface\\>.config.resetTimeout Integer The modem reset timeout in minutes net.interface.\\<interface\\>.config.gpsEnabled Boolean Enable the GPS device in the modem if available net.interface.\\<interface\\>.config.persist Boolean The persist option of the PPP daemon net.interface.\\<interface\\>.config.apn String The modem Access Point Name net.interface.\\<interface\\>.config.dialString String The dial string used for connecting to the APN","title":"Cellular Modem properties"},{"location":"gateway-configuration/network-configuration/#network-configuration-recipes","text":"This section presents some snapshot examples to perform basic operations on networking. The snippets can be modified adapting them to the required configuration (i.e. changing the interface name in the property to be applied). Warning Be aware that an inconsitent or wrong configuration can compromise the network functionality of the gateway. Try the new configuration on a test device before appling it in a production environment! Moreover, if a property is not present in the new snapshot, the old value is used for the configuration. So, the best practice is to set all the needed properties in the snapshot.","title":"Network Configuration recipes"},{"location":"gateway-configuration/network-configuration/#disable-a-network-interface","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <esf:configurations xmlns:esf= \"http://eurotech.com/esf/2.0\" xmlns:ocd= \"http://www.osgi.org/xmlns/metatype/v1.2.0\" > <esf:configuration pid= \"org.eclipse.kura.net.admin.NetworkConfigurationService\" > <esf:properties> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.type\" type= \"String\" > <esf:value> ETHERNET </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.status\" type= \"String\" > <esf:value> netIPv4StatusDisabled </esf:value> </esf:property> </esf:properties> </esf:configuration> </esf:configurations>","title":"Disable a network interface"},{"location":"gateway-configuration/network-configuration/#configure-an-ethernet-interface-for-wan-with-dhcp-client-enabled-and-custom-dns-server","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <esf:configurations xmlns:esf= \"http://eurotech.com/esf/2.0\" xmlns:ocd= \"http://www.osgi.org/xmlns/metatype/v1.2.0\" > <esf:configuration pid= \"org.eclipse.kura.net.admin.NetworkConfigurationService\" > <esf:properties> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.type\" type= \"String\" > <esf:value> ETHERNET </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.dnsServers\" type= \"String\" > <esf:value> 1.2.3.4 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpClient4.enabled\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.enabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.status\" type= \"String\" > <esf:value> netIPv4StatusEnabledWAN </esf:value> </esf:property> </esf:properties> </esf:configuration> </esf:configurations>","title":"Configure an ethernet interface for WAN with DHCP client enabled and custom DNS server"},{"location":"gateway-configuration/network-configuration/#configure-an-ethernet-interface-for-lan-with-dhcp-server-enabled-and-nat-disabled","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <esf:configurations xmlns:esf= \"http://eurotech.com/esf/2.0\" xmlns:ocd= \"http://www.osgi.org/xmlns/metatype/v1.2.0\" > <esf:configuration pid= \"org.eclipse.kura.net.admin.NetworkConfigurationService\" > <esf:properties> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.type\" type= \"String\" > <esf:value> ETHERNET </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.dnsServers\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpClient4.enabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.status\" type= \"String\" > <esf:value> netIPv4StatusEnabledLAN </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.rangeEnd\" type= \"String\" > <esf:value> 192.168.4.110 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.enabled\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.defaultLeaseTime\" type= \"Integer\" > <esf:value> 900 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.prefix\" type= \"Short\" > <esf:value> 24 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.passDns\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.rangeStart\" type= \"String\" > <esf:value> 192.168.4.100 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.dhcpServer4.maxLeaseTime\" type= \"Integer\" > <esf:value> 900 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.address\" type= \"String\" > <esf:value> 192.168.4.1 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.prefix\" type= \"Short\" > <esf:value> 24 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.ip4.gateway\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.enp5s0.config.nat.enabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> </esf:properties> </esf:configuration> </esf:configurations>","title":"Configure an ethernet interface for LAN with DHCP server enabled and NAT disabled"},{"location":"gateway-configuration/network-configuration/#configure-a-wireless-interface-as-access-point-with-dhcp-server-and-nat-enabled","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <esf:configurations xmlns:esf= \"http://eurotech.com/esf/2.0\" xmlns:ocd= \"http://www.osgi.org/xmlns/metatype/v1.2.0\" > <esf:configuration pid= \"org.eclipse.kura.net.admin.NetworkConfigurationService\" > <esf:properties> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.type\" type= \"String\" > <esf:value> WIFI </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.ip4.status\" type= \"String\" > <esf:value> netIPv4StatusEnabledLAN </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.ip4.gateway\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.ip4.dnsServers\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.ip4.prefix\" type= \"Short\" > <esf:value> 24 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.ip4.address\" type= \"String\" > <esf:value> 172.16.1.1 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpClient4.enabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.rangeStart\" type= \"String\" > <esf:value> 172.16.1.100 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.maxLeaseTime\" type= \"Integer\" > <esf:value> 900 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.defaultLeaseTime\" type= \"Integer\" > <esf:value> 900 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.rangeEnd\" type= \"String\" > <esf:value> 172.16.1.110 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.prefix\" type= \"Short\" > <esf:value> 24 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.enabled\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.passDns\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.nat.enabled\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.mode\" type= \"String\" > <esf:value> MASTER </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.driver\" type= \"String\" > <esf:value> nl80211 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"true\" name= \"net.interface.wlp1s0.config.wifi.master.passphrase\" type= \"Password\" > <esf:value> ZW5hYmxlbWVwbGVhc2U= </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.ssid\" type= \"String\" > <esf:value> kura_gateway_19 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.securityType\" type= \"String\" > <esf:value> SECURITY_WPA2 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.mode\" type= \"String\" > <esf:value> MASTER </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.channel\" type= \"String\" > <esf:value> 11 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.radioMode\" type= \"String\" > <esf:value> RADIO_MODE_80211g </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.ignoreSSID\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.master.pairwiseCiphers\" type= \"String\" > <esf:value> CCMP </esf:value> </esf:property> </esf:properties> </esf:configuration> </esf:configurations>","title":"Configure a wireless interface as access point with DHCP server and NAT enabled"},{"location":"gateway-configuration/network-configuration/#configure-a-wireless-interface-as-station-mode-with-dhcp-client-enabled","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <esf:configurations xmlns:esf= \"http://eurotech.com/esf/2.0\" xmlns:ocd= \"http://www.osgi.org/xmlns/metatype/v1.2.0\" > <esf:configuration pid= \"org.eclipse.kura.net.admin.NetworkConfigurationService\" > <esf:properties> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.type\" type= \"String\" > <esf:value> WIFI </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.ip4.status\" type= \"String\" > <esf:value> netIPv4StatusEnabledLAN </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.ip4.dnsServers\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpClient4.enabled\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.dhcpServer4.enabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.mode\" type= \"String\" > <esf:value> INFRA </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.infra.ssid\" type= \"String\" > <esf:value> MyWirelessNetwork </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.infra.bgscan\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"true\" name= \"net.interface.wlp1s0.config.wifi.infra.passphrase\" type= \"Password\" > <esf:value> MyPasswordBase64 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.infra.ignoreSSID\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.infra.mode\" type= \"String\" > <esf:value> INFRA </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.infra.pingAccessPoint\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.infra.driver\" type= \"String\" > <esf:value> nl80211 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.wlp1s0.config.wifi.infra.securityType\" type= \"String\" > <esf:value> SECURITY_WPA2 </esf:value> </esf:property> </esf:properties> </esf:configuration> </esf:configurations>","title":"Configure a wireless interface as station mode with DHCP client enabled"},{"location":"gateway-configuration/network-configuration/#enable-a-cellular-interface","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <esf:configurations xmlns:esf= \"http://eurotech.com/esf/2.0\" xmlns:ocd= \"http://www.osgi.org/xmlns/metatype/v1.2.0\" > <esf:configuration pid= \"org.eclipse.kura.net.admin.NetworkConfigurationService\" > <esf:properties> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.type\" type= \"String\" > <esf:value> MODEM </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.ip4.status\" type= \"String\" > <esf:value> netIPv4StatusEnabledWAN </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.ip4.dnsServers\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.dhcpClient4.enabled\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.dhcpServer4.enabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.idle\" type= \"Integer\" > <esf:value> 95 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"true\" name= \"net.interface.1-1.config.password\" type= \"Password\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.pdpType\" type= \"String\" > <esf:value> IP </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.ipAddress\" type= \"String\" > <esf:value/> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.maxFail\" type= \"Integer\" > <esf:value> 5 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.authType\" type= \"String\" > <esf:value> NONE </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.lcpEchoInterval\" type= \"Integer\" > <esf:value> 0 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.enabled\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.activeFilter\" type= \"String\" > <esf:value> inbound </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.lcpEchoFailure\" type= \"Integer\" > <esf:value> 0 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.diversityEnabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.resetTimeout\" type= \"Integer\" > <esf:value> 5 </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.gpsEnabled\" type= \"Boolean\" > <esf:value> false </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.persist\" type= \"Boolean\" > <esf:value> true </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.dialString\" type= \"String\" > <esf:value> atd*99***2# </esf:value> </esf:property> <esf:property array= \"false\" encrypted= \"false\" name= \"net.interface.1-1.config.apn\" type= \"String\" > <esf:value> web.omnitel.it </esf:value> </esf:property> </esf:properties> </esf:configuration> </esf:configurations>","title":"Enable a cellular interface"},{"location":"gateway-configuration/ssl-configuration/","text":"SSL Configuration A SSL Service instance manages the configuration of the SSL connections. It uses the associated KeystoreService to access the trust certificates, private keys pairs needed to setup a SSL connection. It also enforces best practices that are not enabled by default in the Java VM, such as, enabling hostname verification, disabling the legacy SSL-2.0-compatible Client Hello, and disabling the Nagle algorithm. The list of all available SSL Service instances is available in the SSL Configuration tab of the Security section, accessible only by the users with the corresponding permission. By default, the framework creates a SSLManagerService instance with the org.eclipse.kura.ssl.SslManagerService PID. This instance is generally used by all the core services of the framework. A new SSL Service instance can be created using the New Button, by specifying the desired factory and the Service PID that will be associated with this new instance. An instance of the default org.eclipse.kura.ssl.SslManagerService factory has the following configuration parameters: KeystoreService Target Filter - specifies, as an OSGi target filter, the pid of the KeystoreService used to manage the SSL key store (Required field). Truststore Target Filter - specifies, as an OSGi target filter, the pid of the KeystoreService used to manage the SSL trust store. If the target service cannot be found, the service configured with the Keystore Target Filter parameter will be used as truststore. ssl.default.protocol - defines the allowed SSL protocol. ssl.hostname.verification - indicates whether hostname verification is enabled or disabled. ssl.default.cipherSuites - defines the allowed cipher suites. By selecting the Select available targets button, the user can associate the SSLManagerService instance with the corresponding KeystoreService instances available in the framework runtime. Server SSL Certificate The device requires a public key in its trust store in order to authenticate the broker and be able to setup an SSL connection. Kura is distributed with a pre-initialized SSL keystore that contains only some of the major Certification Authorities (CA) public keys. If the broker uses a certificate signed by a different CA, or uses an auto-signed certificate, the system administrator must setup Kura with the correct certificates used to trust the remote cloud broker. The inclusion of public certificates is accomplished with the Server SSL Certificate feature. To do so, the SSL Certificates form must be completed by providing a certificate or a certificates chain to be trusted and defining the alias used to register this new data in the device's trust store. With this feature, when the device tries to instantiate an SSL connection with the broker, it receives the broker's public key chain. The SSL connection is secured only if the received chain is trusted. This connection can only happen if one of the certificates that compose the broker chain are available in the device's trust store. When instantiating the device's trust store, the user decides whether to add a single certificate (leaf or CA certificate) or the full chain. In the latter case, the chain should be provided by specifying the leaf certificate, followed by the CA certificate that is signing it, and so on, until the root CA is reached. An example of this scenario is depicted in the following image: Device SSL Certificate & Mutual Authentication Mutual authentication is a technique that allows authentication of the device that is connecting to the broker. The form available in Certificates List may be used to specify the keys needed to enable mutual authentication. This authentication may be accomplished by specifying a couple of certificates (private and public keys) to be used by the client device to authenticate itself to the broker. This authentication is possible because the broker has the root CA certificate that has been used to sign the couple held by the device. In this way, the authenticity of the couple of certificates held by the device may be verified, and therefore, enable the two communicating parts (the broker and the device) to trust each other. To enable mutual authentication, the user must complete the form with a well-formed key pair (public and private), and with an alias value that corresponds with the account name used to connect to the broker. Key Pair Generation The keys may be generated using specific software, such as OpenSSL or Keytool . This section describes how to use OpenSSL to generate a couple of private and public keys. The private key may be created using the following command: openssl genrsa -out certsDirectory/certs/certificate.key 1024 This command creates a new, 1024-bit private key in the specified path. This key is used to generate a Certificate Signing Request (CSR) file, which is used by a CA to authenticate the certificate's creator. A CSR file is created with OpenSSL using the following command: openssl req -new -key certsDirectory/certs/certificate.key -out certsDirectory/crl/certificate.csr If the user is creating their own certificate chain, the CSR file may be signed using a personal CA. This process may be accomplished using OpenSSL with the following command: openssl ca -config certsDirectory/openssl.cnf -days 3650 -keyfile certsDirectory/ca/ca.key -cert certsDirectory/ca/ca.pem -out certsDirectory/certs/certificate.pem -infiles certsDirectory/crl/certificate.csr The parameters are defined as follows: -config : specifies the OpenSSL configuration file that must be used to sign the certificate. -days : specifies how long the certificate is valid. -keyfile and -cert : allow the specification of the CA that will sign the CSR file. -out : identifies the location and the name of the signed certificate that will be created. -infiles : identifies the location of the CSR file that has to be signed. Tip The private key may not be placed into the Kura Gateway Administration Console without a format conversion. OpenSSL offers the following command to convert the input private key to a non-encrypted PKCS#8 format that may be processed by the Kura code: openssl pkcs8 -topk8 -inform PEM -outform PEM -in inPrivateKey.key -out outKey.pem -nocrypt","title":"SSL Configuration"},{"location":"gateway-configuration/ssl-configuration/#ssl-configuration","text":"A SSL Service instance manages the configuration of the SSL connections. It uses the associated KeystoreService to access the trust certificates, private keys pairs needed to setup a SSL connection. It also enforces best practices that are not enabled by default in the Java VM, such as, enabling hostname verification, disabling the legacy SSL-2.0-compatible Client Hello, and disabling the Nagle algorithm. The list of all available SSL Service instances is available in the SSL Configuration tab of the Security section, accessible only by the users with the corresponding permission. By default, the framework creates a SSLManagerService instance with the org.eclipse.kura.ssl.SslManagerService PID. This instance is generally used by all the core services of the framework. A new SSL Service instance can be created using the New Button, by specifying the desired factory and the Service PID that will be associated with this new instance. An instance of the default org.eclipse.kura.ssl.SslManagerService factory has the following configuration parameters: KeystoreService Target Filter - specifies, as an OSGi target filter, the pid of the KeystoreService used to manage the SSL key store (Required field). Truststore Target Filter - specifies, as an OSGi target filter, the pid of the KeystoreService used to manage the SSL trust store. If the target service cannot be found, the service configured with the Keystore Target Filter parameter will be used as truststore. ssl.default.protocol - defines the allowed SSL protocol. ssl.hostname.verification - indicates whether hostname verification is enabled or disabled. ssl.default.cipherSuites - defines the allowed cipher suites. By selecting the Select available targets button, the user can associate the SSLManagerService instance with the corresponding KeystoreService instances available in the framework runtime.","title":"SSL Configuration"},{"location":"gateway-configuration/ssl-configuration/#server-ssl-certificate","text":"The device requires a public key in its trust store in order to authenticate the broker and be able to setup an SSL connection. Kura is distributed with a pre-initialized SSL keystore that contains only some of the major Certification Authorities (CA) public keys. If the broker uses a certificate signed by a different CA, or uses an auto-signed certificate, the system administrator must setup Kura with the correct certificates used to trust the remote cloud broker. The inclusion of public certificates is accomplished with the Server SSL Certificate feature. To do so, the SSL Certificates form must be completed by providing a certificate or a certificates chain to be trusted and defining the alias used to register this new data in the device's trust store. With this feature, when the device tries to instantiate an SSL connection with the broker, it receives the broker's public key chain. The SSL connection is secured only if the received chain is trusted. This connection can only happen if one of the certificates that compose the broker chain are available in the device's trust store. When instantiating the device's trust store, the user decides whether to add a single certificate (leaf or CA certificate) or the full chain. In the latter case, the chain should be provided by specifying the leaf certificate, followed by the CA certificate that is signing it, and so on, until the root CA is reached. An example of this scenario is depicted in the following image:","title":"Server SSL Certificate"},{"location":"gateway-configuration/ssl-configuration/#device-ssl-certificate-mutual-authentication","text":"Mutual authentication is a technique that allows authentication of the device that is connecting to the broker. The form available in Certificates List may be used to specify the keys needed to enable mutual authentication. This authentication may be accomplished by specifying a couple of certificates (private and public keys) to be used by the client device to authenticate itself to the broker. This authentication is possible because the broker has the root CA certificate that has been used to sign the couple held by the device. In this way, the authenticity of the couple of certificates held by the device may be verified, and therefore, enable the two communicating parts (the broker and the device) to trust each other. To enable mutual authentication, the user must complete the form with a well-formed key pair (public and private), and with an alias value that corresponds with the account name used to connect to the broker.","title":"Device SSL Certificate &amp; Mutual Authentication"},{"location":"gateway-configuration/ssl-configuration/#key-pair-generation","text":"The keys may be generated using specific software, such as OpenSSL or Keytool . This section describes how to use OpenSSL to generate a couple of private and public keys. The private key may be created using the following command: openssl genrsa -out certsDirectory/certs/certificate.key 1024 This command creates a new, 1024-bit private key in the specified path. This key is used to generate a Certificate Signing Request (CSR) file, which is used by a CA to authenticate the certificate's creator. A CSR file is created with OpenSSL using the following command: openssl req -new -key certsDirectory/certs/certificate.key -out certsDirectory/crl/certificate.csr If the user is creating their own certificate chain, the CSR file may be signed using a personal CA. This process may be accomplished using OpenSSL with the following command: openssl ca -config certsDirectory/openssl.cnf -days 3650 -keyfile certsDirectory/ca/ca.key -cert certsDirectory/ca/ca.pem -out certsDirectory/certs/certificate.pem -infiles certsDirectory/crl/certificate.csr The parameters are defined as follows: -config : specifies the OpenSSL configuration file that must be used to sign the certificate. -days : specifies how long the certificate is valid. -keyfile and -cert : allow the specification of the CA that will sign the CSR file. -out : identifies the location and the name of the signed certificate that will be created. -infiles : identifies the location of the CSR file that has to be signed. Tip The private key may not be placed into the Kura Gateway Administration Console without a format conversion. OpenSSL offers the following command to convert the input private key to a non-encrypted PKCS#8 format that may be processed by the Kura code: openssl pkcs8 -topk8 -inform PEM -outform PEM -in inPrivateKey.key -out outKey.pem -nocrypt","title":"Key Pair Generation"},{"location":"gateway-configuration/web-console-configuration/","text":"Web Console Configuration The Web Console exposes a set of configuration parameters that can be used to increase the overall UI security. The Web Console configuration can be accessed in the Security section. Web Server Entry Point This parameter allows to configure the relative path that the user will be redirected to when accessing http(s)://gateway-ip/. Note: this parameter does not change the Kura Web UI relative path, that is always /admin/console. The default value set is /admin/console Session max inactivity interval The session max inactivity interval in minutes. If no interaction with the Web UI is performed for the value of this parameter in minutes, a new login will be requested. The default value set is 15 minutes Access Banner Enabled For security reasons, it may be needed to display to the user a banner that describes the intended system use before authenticating. Once enabled and configured, the Kura Web UI will display a banner before every access attempt, as depicted in the image below. Password Management This section is related to the definition of required parameters that must be respected when defining a new password, for example when a user changes its password at first access. Minimum password length The minimum length to be enforced for new passwords. Set to 0 to disable. The default value set is 8 characters Require digits in new password If set to true, new passwords will be accepted only if containing at least one digit. The default value is false Require special characters in new password If set to true, new passwords will be accepted only if containing at least one non alphanumeric character The default value is false Require uppercase and lowercase characters in new passwords If set to true, new passwords will be accepted only if containing both uppercase and lowercase alphanumeric characters. The default value is false Allowed ports If set to a non empty list, Web Console access will be allowed only on the specified ports. If set to an empty list, access will be allowed on all ports. It is needed for the end user to make sure that the allowed ports are open in HttpService and Firewall configuration. Authentication Method \"Password\" Enabled Defines whether the \"Password\" authentication method is enabled or not. The default value is true Authentication Method \"Certificate\" Enabled Defines whether the \"Certificate\" authentication method is enabled or not The default value is true","title":"Web Console Configuration"},{"location":"gateway-configuration/web-console-configuration/#web-console-configuration","text":"The Web Console exposes a set of configuration parameters that can be used to increase the overall UI security. The Web Console configuration can be accessed in the Security section.","title":"Web Console Configuration"},{"location":"gateway-configuration/web-console-configuration/#web-server-entry-point","text":"This parameter allows to configure the relative path that the user will be redirected to when accessing http(s)://gateway-ip/. Note: this parameter does not change the Kura Web UI relative path, that is always /admin/console. The default value set is /admin/console","title":"Web Server Entry Point"},{"location":"gateway-configuration/web-console-configuration/#session-max-inactivity-interval","text":"The session max inactivity interval in minutes. If no interaction with the Web UI is performed for the value of this parameter in minutes, a new login will be requested. The default value set is 15 minutes","title":"Session max inactivity interval"},{"location":"gateway-configuration/web-console-configuration/#access-banner-enabled","text":"For security reasons, it may be needed to display to the user a banner that describes the intended system use before authenticating. Once enabled and configured, the Kura Web UI will display a banner before every access attempt, as depicted in the image below.","title":"Access Banner Enabled"},{"location":"gateway-configuration/web-console-configuration/#password-management","text":"This section is related to the definition of required parameters that must be respected when defining a new password, for example when a user changes its password at first access.","title":"Password Management"},{"location":"gateway-configuration/web-console-configuration/#minimum-password-length","text":"The minimum length to be enforced for new passwords. Set to 0 to disable. The default value set is 8 characters","title":"Minimum password length"},{"location":"gateway-configuration/web-console-configuration/#require-digits-in-new-password","text":"If set to true, new passwords will be accepted only if containing at least one digit. The default value is false","title":"Require digits in new password"},{"location":"gateway-configuration/web-console-configuration/#require-special-characters-in-new-password","text":"If set to true, new passwords will be accepted only if containing at least one non alphanumeric character The default value is false","title":"Require special characters in new password"},{"location":"gateway-configuration/web-console-configuration/#require-uppercase-and-lowercase-characters-in-new-passwords","text":"If set to true, new passwords will be accepted only if containing both uppercase and lowercase alphanumeric characters. The default value is false","title":"Require uppercase and lowercase characters in new passwords"},{"location":"gateway-configuration/web-console-configuration/#allowed-ports","text":"If set to a non empty list, Web Console access will be allowed only on the specified ports. If set to an empty list, access will be allowed on all ports. It is needed for the end user to make sure that the allowed ports are open in HttpService and Firewall configuration.","title":"Allowed ports"},{"location":"gateway-configuration/web-console-configuration/#authentication-method-password-enabled","text":"Defines whether the \"Password\" authentication method is enabled or not. The default value is true","title":"Authentication Method \"Password\" Enabled"},{"location":"gateway-configuration/web-console-configuration/#authentication-method-certificate-enabled","text":"Defines whether the \"Certificate\" authentication method is enabled or not The default value is true","title":"Authentication Method \"Certificate\" Enabled"},{"location":"gateway-configuration/wifi-configuration/","text":"Wi-Fi Configuration From a configuration standpoint, the Wi-Fi interface (e.g., wlan0) may be viewed as an extension of Ethernet. In addition to the TCP/IP and DHCP & NAT configuration tabs, it has the Wireless tab that allows for the configuration of wireless settings. These configuration options are described below. Warning Before using wifi make sure that you have correctly set the Regulatory Domain on the gateway. You can check the current configuration using the iw reg get command. To set the Regulatory Domain please refer to the specific section in the Gateway Configurations. Wireless Configuration The Wireless tab contains the following configuration parameters: Wireless Mode : defines the mode of operation. Access Point: creates a wireless access point. Station Mode: connects to a wireless access point. Network Name : specifies the Service Set Identifier (SSID). In Access Point mode, this is the SSID that identifies this wireless network. In Station mode, this is the SSID of a wireless network to connect to. Radio Mode : defines 802.11 mode. 802.11 ac/n/a (either in 2.4Ghz or 5Ghz depending on the choosen channel) 802.11n/g/b (2.4Ghz only) 802.11g/b (2.4Ghz only) 802.11b (2.4Ghz only) 802.11a (either in 2.4Ghz or 5Ghz depending on the choosen channel) Wireless Security : sets the security protocol for the wireless network. None: No Wi-Fi security WEP: Wired Equivalent Privacy WPA: Wi-Fi Protected Access WPA2: Wi-Fi Protected Access II Wireless Password : sets the password for the wireless network. WEP: 64-bit or 128-bit encryption key WPA/WPA2: pre-shared key Verify Password : sets the password verification field. In Access Point mode, allows the wireless password to be retyped for verification. In Station mode, this field is disabled. Pairwise Ciphers : lists accepted pairwise (unicast) ciphers for WPA/WPA2. In Access Point mode, this option is disabled. In Station mode, CCMP (AES-based encryption mode with strong security) TKIP (Temporal Key Integrity Protocol) CCMP and TKIP Group Ciphers : lists accepted group (broadcast/multicast) ciphers for WPA/WPA2. In Access Point mode, this option is disabled. In Station mode, CCMP (AES-based encryption mode with strong security) TKIP (Temporal Key Integrity Protocol) CCMP and TKIP Bgscan Module : requests background scans for the purpose of roaming within an ESS (i.e., within a single network block with all the APs using the same SSID). None: background scan is disabled Simple: periodic background scans based on signal strength Learn: learn channels used by the network and try to avoid bgscans on other channels Bgscan Signal Strength Threshold : defines a threshold (in dBm) that determines which one of the following two parameters (i.e., Short Interval or Long Interval ) will be effective. Bgscan Short Interval : defines the interval between background scans (in seconds) if the actual signal level of the currently connected access point is worse than signal_strength. Bgscan Long Interval : defines the interval between background scans (in seconds) if the actual signal level of the currently connected access point is better than signal_strength. Ping Access Point & renew DHCP lease if not reachable : enables pinging the access point after connection is established. In Access Point mode, this option is disabled. In Station mode, if set to true , the unit will ping the access point and attempt to renew the DHCP lease if the access point is not reachable. Ignore Broadcast SSID : operates as follows if set to true : In Access Point mode, sends an empty SSID in beacons and ignores probe request frames that do not specify full SSID. In Station mode, does not scan for the SSID before attempting to associate. Channels table : allows the selection of desired channel frequencies. The availability of the desired frequency is subject to the Regdom set on the device. For a list of limitations in different countries you can consult the following page: List of WLAN channels . Channels marked as No Irradiation and Radar Detection can be used only if DFS (Dynamic Frequency Selection) is supported by the Wi-Fi chip. In Access Point mode, only one channel may be selected. In Station mode, the list of available channels depends on the selected Radio Mode. The selected radio mode also affects the ability to select a network in the scan window (if the channel associated with the network is not enabled in the regulatory domain an error message will be shown). Wi-Fi Station Mode Configuration In addition to the options described above, the Wireless configuration display provides two buttons that help to configure Wi-Fi in the Station mode. These buttons are described below. Access Point Scan : clicking this button triggers access point scan operations. Upon a successful scan, a table containing access points within range is presented. This table contains the following information: SSID MAC Address Signal Strength (in dBm) Channel Frequency Security If you select one of these access points, respective wireless controls (i.e., Network Name , Wireless Security , and Channel ) are filled with information obtained during the scan operation. Password Verification : clicking this button triggers password verification before a full connection is established. Wi-Fi Linux Configuration This section describes the changes applied by Kura at the Linux networking configuration. Please read the following note before proceeding with manual changes of the Linux networking configuration. Warning It is NOT recommended performing manual editing of the Linux networking configuration files when the gateway configuration is being managed through Kura. While Linux may correctly accept manual changes, Kura may not be able to interpret the new configuration resulting in an inconsistent state. When the Wi-Fi configuration for the Access Point mode is submitted, Kura generates the /etc/hostapd.conf file and launches the hostapd program as shown below. hostapd:B /etc/hostapd.conf # /etc/hostapd/hostapd.conf interface = wlan0 driver = nl80211 # SSID to use. This will be the \"name\" of the accesspoint ssid = kura_gateway_00:E0:C7:09:35:D8 # basic operational settings hw_mode = g wme_enabled = 0 ieee80211n = 0 channel = 1 # Logging and debugging settings: more of this in original config file logger_syslog = -1 logger_syslog_level = 2 logger_stdout = -1 logger_stdout_level = 2 dump_file = /tmp/hostapd.dump # WPA settings. We'll use stronger WPA2 # bit0 = WPA # bit1 = IEEE 802.11i/RSN (WPA2) (dot11RSNAEnabled) wpa = 2 # Preshared key of between 8-63 ASCII characters. # If you define the key in here, make sure that the file is not readable # by anyone but root. Alternatively you can use a separate file for the # key; see original hostapd.conf for more information. wpa_passphrase = testKEYS # Key management algorithm. In this case, a simple pre-shared key (PSK) wpa_key_mgmt = WPA-PSK # The cipher suite to use. We want to use stronger CCMP cipher. wpa_pairwise = CCMP # Change the broadcasted/multicasted keys after this many seconds. wpa_group_rekey = 600 # Change the master key after this many seconds. Master key is used as a basis # (source) for the encryption keys. wpa_gmk_rekey = 86400 # Send empty SSID in beacons and ignore probe request frames that do not # specify full SSID, i.e., require stations to know SSID. # default: disabled (0) # 1 = send empty (length=0) SSID in beacon and ignore probe request for # broadcast SSID # 2 = clear SSID (ASCII 0), but keep the original length (this may be required # with some clients that do not support empty SSID) and ignore probe # requests for broadcast SSID ignore_broadcast_ssid = 0 When the Wi-Fi configuration for the Station mode is submitted, Kura generates the /etc/wpa_supplicant.conf file and launches the wpa_supplicant program as shown below. wpa_supplicant:B:D nl80211:i wlan0:c /etc/wpa_supplicant.conf # /etc/wpa_supplicant.conf # allow frontend (e.g., wpa_cli) to be used by all users in 'wheel' group ctrl_interface = /var/run/wpa_supplicant ctrl_interface_group = wheel # home network; allow all valid ciphers network ={ mode = 0 ssid = \"Eurotech-INC\" scan_ssid = 1 key_mgmt = WPA-PSK psk = \"WG4t3101\" proto = RSN pairwise = CCMP TKIP group = CCMP TKIP scan_freq = 2412 bgscan = \"\" }","title":"Wi-Fi Configuration"},{"location":"gateway-configuration/wifi-configuration/#wi-fi-configuration","text":"From a configuration standpoint, the Wi-Fi interface (e.g., wlan0) may be viewed as an extension of Ethernet. In addition to the TCP/IP and DHCP & NAT configuration tabs, it has the Wireless tab that allows for the configuration of wireless settings. These configuration options are described below. Warning Before using wifi make sure that you have correctly set the Regulatory Domain on the gateway. You can check the current configuration using the iw reg get command. To set the Regulatory Domain please refer to the specific section in the Gateway Configurations.","title":"Wi-Fi Configuration"},{"location":"gateway-configuration/wifi-configuration/#wireless-configuration","text":"The Wireless tab contains the following configuration parameters: Wireless Mode : defines the mode of operation. Access Point: creates a wireless access point. Station Mode: connects to a wireless access point. Network Name : specifies the Service Set Identifier (SSID). In Access Point mode, this is the SSID that identifies this wireless network. In Station mode, this is the SSID of a wireless network to connect to. Radio Mode : defines 802.11 mode. 802.11 ac/n/a (either in 2.4Ghz or 5Ghz depending on the choosen channel) 802.11n/g/b (2.4Ghz only) 802.11g/b (2.4Ghz only) 802.11b (2.4Ghz only) 802.11a (either in 2.4Ghz or 5Ghz depending on the choosen channel) Wireless Security : sets the security protocol for the wireless network. None: No Wi-Fi security WEP: Wired Equivalent Privacy WPA: Wi-Fi Protected Access WPA2: Wi-Fi Protected Access II Wireless Password : sets the password for the wireless network. WEP: 64-bit or 128-bit encryption key WPA/WPA2: pre-shared key Verify Password : sets the password verification field. In Access Point mode, allows the wireless password to be retyped for verification. In Station mode, this field is disabled. Pairwise Ciphers : lists accepted pairwise (unicast) ciphers for WPA/WPA2. In Access Point mode, this option is disabled. In Station mode, CCMP (AES-based encryption mode with strong security) TKIP (Temporal Key Integrity Protocol) CCMP and TKIP Group Ciphers : lists accepted group (broadcast/multicast) ciphers for WPA/WPA2. In Access Point mode, this option is disabled. In Station mode, CCMP (AES-based encryption mode with strong security) TKIP (Temporal Key Integrity Protocol) CCMP and TKIP Bgscan Module : requests background scans for the purpose of roaming within an ESS (i.e., within a single network block with all the APs using the same SSID). None: background scan is disabled Simple: periodic background scans based on signal strength Learn: learn channels used by the network and try to avoid bgscans on other channels Bgscan Signal Strength Threshold : defines a threshold (in dBm) that determines which one of the following two parameters (i.e., Short Interval or Long Interval ) will be effective. Bgscan Short Interval : defines the interval between background scans (in seconds) if the actual signal level of the currently connected access point is worse than signal_strength. Bgscan Long Interval : defines the interval between background scans (in seconds) if the actual signal level of the currently connected access point is better than signal_strength. Ping Access Point & renew DHCP lease if not reachable : enables pinging the access point after connection is established. In Access Point mode, this option is disabled. In Station mode, if set to true , the unit will ping the access point and attempt to renew the DHCP lease if the access point is not reachable. Ignore Broadcast SSID : operates as follows if set to true : In Access Point mode, sends an empty SSID in beacons and ignores probe request frames that do not specify full SSID. In Station mode, does not scan for the SSID before attempting to associate. Channels table : allows the selection of desired channel frequencies. The availability of the desired frequency is subject to the Regdom set on the device. For a list of limitations in different countries you can consult the following page: List of WLAN channels . Channels marked as No Irradiation and Radar Detection can be used only if DFS (Dynamic Frequency Selection) is supported by the Wi-Fi chip. In Access Point mode, only one channel may be selected. In Station mode, the list of available channels depends on the selected Radio Mode. The selected radio mode also affects the ability to select a network in the scan window (if the channel associated with the network is not enabled in the regulatory domain an error message will be shown).","title":"Wireless Configuration"},{"location":"gateway-configuration/wifi-configuration/#wi-fi-station-mode-configuration","text":"In addition to the options described above, the Wireless configuration display provides two buttons that help to configure Wi-Fi in the Station mode. These buttons are described below. Access Point Scan : clicking this button triggers access point scan operations. Upon a successful scan, a table containing access points within range is presented. This table contains the following information: SSID MAC Address Signal Strength (in dBm) Channel Frequency Security If you select one of these access points, respective wireless controls (i.e., Network Name , Wireless Security , and Channel ) are filled with information obtained during the scan operation. Password Verification : clicking this button triggers password verification before a full connection is established.","title":"Wi-Fi Station Mode Configuration"},{"location":"gateway-configuration/wifi-configuration/#wi-fi-linux-configuration","text":"This section describes the changes applied by Kura at the Linux networking configuration. Please read the following note before proceeding with manual changes of the Linux networking configuration. Warning It is NOT recommended performing manual editing of the Linux networking configuration files when the gateway configuration is being managed through Kura. While Linux may correctly accept manual changes, Kura may not be able to interpret the new configuration resulting in an inconsistent state. When the Wi-Fi configuration for the Access Point mode is submitted, Kura generates the /etc/hostapd.conf file and launches the hostapd program as shown below. hostapd:B /etc/hostapd.conf # /etc/hostapd/hostapd.conf interface = wlan0 driver = nl80211 # SSID to use. This will be the \"name\" of the accesspoint ssid = kura_gateway_00:E0:C7:09:35:D8 # basic operational settings hw_mode = g wme_enabled = 0 ieee80211n = 0 channel = 1 # Logging and debugging settings: more of this in original config file logger_syslog = -1 logger_syslog_level = 2 logger_stdout = -1 logger_stdout_level = 2 dump_file = /tmp/hostapd.dump # WPA settings. We'll use stronger WPA2 # bit0 = WPA # bit1 = IEEE 802.11i/RSN (WPA2) (dot11RSNAEnabled) wpa = 2 # Preshared key of between 8-63 ASCII characters. # If you define the key in here, make sure that the file is not readable # by anyone but root. Alternatively you can use a separate file for the # key; see original hostapd.conf for more information. wpa_passphrase = testKEYS # Key management algorithm. In this case, a simple pre-shared key (PSK) wpa_key_mgmt = WPA-PSK # The cipher suite to use. We want to use stronger CCMP cipher. wpa_pairwise = CCMP # Change the broadcasted/multicasted keys after this many seconds. wpa_group_rekey = 600 # Change the master key after this many seconds. Master key is used as a basis # (source) for the encryption keys. wpa_gmk_rekey = 86400 # Send empty SSID in beacons and ignore probe request frames that do not # specify full SSID, i.e., require stations to know SSID. # default: disabled (0) # 1 = send empty (length=0) SSID in beacon and ignore probe request for # broadcast SSID # 2 = clear SSID (ASCII 0), but keep the original length (this may be required # with some clients that do not support empty SSID) and ignore probe # requests for broadcast SSID ignore_broadcast_ssid = 0 When the Wi-Fi configuration for the Station mode is submitted, Kura generates the /etc/wpa_supplicant.conf file and launches the wpa_supplicant program as shown below. wpa_supplicant:B:D nl80211:i wlan0:c /etc/wpa_supplicant.conf # /etc/wpa_supplicant.conf # allow frontend (e.g., wpa_cli) to be used by all users in 'wheel' group ctrl_interface = /var/run/wpa_supplicant ctrl_interface_group = wheel # home network; allow all valid ciphers network ={ mode = 0 ssid = \"Eurotech-INC\" scan_ssid = 1 key_mgmt = WPA-PSK psk = \"WG4t3101\" proto = RSN pairwise = CCMP TKIP group = CCMP TKIP scan_freq = 2412 bgscan = \"\" }","title":"Wi-Fi Linux Configuration"},{"location":"intro/docker-quick-start/","text":"Docker Quick Start Installation Eclipse Kura is also available as a Docker container available in Docker Hub . To download and run, use the following command: docker run -d -p 443:443 -t eclipse/kura This command will start Kura in background and the Kura Web Ui will be available through port 443. Once the image is started you can navigate your browser to https://localhost and log in using the credentials admin : admin . Command Toolbox Following, a set of useful Docker command that can be used to list and manage Docker containers. For more details on Docker commands, please reference the official Docker documentation List Docker Images To list all the installed Docker images run: docker images List Running Docker Containers To list all the available instances (both running and powered off) run: docker ps -a Start/Stop a Docker Container docker stop <container id> docker start <container id> where <container id> is the instance identification number.","title":"Docker Quick Start"},{"location":"intro/docker-quick-start/#docker-quick-start","text":"","title":"Docker Quick Start"},{"location":"intro/docker-quick-start/#installation","text":"Eclipse Kura is also available as a Docker container available in Docker Hub . To download and run, use the following command: docker run -d -p 443:443 -t eclipse/kura This command will start Kura in background and the Kura Web Ui will be available through port 443. Once the image is started you can navigate your browser to https://localhost and log in using the credentials admin : admin .","title":"Installation"},{"location":"intro/docker-quick-start/#command-toolbox","text":"Following, a set of useful Docker command that can be used to list and manage Docker containers. For more details on Docker commands, please reference the official Docker documentation","title":"Command Toolbox"},{"location":"intro/docker-quick-start/#list-docker-images","text":"To list all the installed Docker images run: docker images","title":"List Docker Images"},{"location":"intro/docker-quick-start/#list-running-docker-containers","text":"To list all the available instances (both running and powered off) run: docker ps -a","title":"List Running Docker Containers"},{"location":"intro/docker-quick-start/#startstop-a-docker-container","text":"docker stop <container id> docker start <container id> where <container id> is the instance identification number.","title":"Start/Stop a Docker Container"},{"location":"intro/intel-up-2-quick-start/","text":"Intel Up\u00b2 Quick Start Overview This section provides Eclipse Kura\u2122 quick installation procedures for the Intel Up\u00b2 and the Kura development environment. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page . This quickstart has been tested using the following image: ubuntu-20.04.4-live-server-amd64.iso downloaded from https://releases.ubuntu.com/20.04/ubuntu-20.04.4-live-server-amd64.iso and with the image burned on an USB stick with balenaEtcher . A complete guide on how to install Ubuntu on the Intel Up\u00b2 can be found here . It is important, in order to access the HAT, Bluetooth, Wifi functionality, to follow the relative steps provided in the complete guide. Make sure to assign the right execute permissions to kurad user created by the installer as described here: Add Groups . It is high raccomanded to install the custom Intel kernel provided in the guide. Eclipse Kura\u2122 Installation To install Kura with its dependencies on the Intel Up\u00b2, perform the following steps: Boot the Intel Up\u00b2 with the Ubuntu Image 20.04.3. Make sure your device is connected to internet. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: wget http://download.eclipse.org/kura/releases/<version>/kura_<version>_intel-up2-ubuntu-20_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: apt-get install./ kura_<version>_intel-up2-ubuntu-20_installer.deb Set the right Wi-Fi regulatory domain based on your current world region editing the /etc/default/crda and adding the ISO 3166-1 alpha-2 code of your region. Reboot the Intel Up\u00b2 with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with an untrusted certificate: Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"Intel Up\u00b2 Quick Start"},{"location":"intro/intel-up-2-quick-start/#intel-up2-quick-start","text":"","title":"Intel Up\u00b2 Quick Start"},{"location":"intro/intel-up-2-quick-start/#overview","text":"This section provides Eclipse Kura\u2122 quick installation procedures for the Intel Up\u00b2 and the Kura development environment. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page . This quickstart has been tested using the following image: ubuntu-20.04.4-live-server-amd64.iso downloaded from https://releases.ubuntu.com/20.04/ubuntu-20.04.4-live-server-amd64.iso and with the image burned on an USB stick with balenaEtcher . A complete guide on how to install Ubuntu on the Intel Up\u00b2 can be found here . It is important, in order to access the HAT, Bluetooth, Wifi functionality, to follow the relative steps provided in the complete guide. Make sure to assign the right execute permissions to kurad user created by the installer as described here: Add Groups . It is high raccomanded to install the custom Intel kernel provided in the guide.","title":"Overview"},{"location":"intro/intel-up-2-quick-start/#eclipse-kura-installation","text":"To install Kura with its dependencies on the Intel Up\u00b2, perform the following steps: Boot the Intel Up\u00b2 with the Ubuntu Image 20.04.3. Make sure your device is connected to internet. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: wget http://download.eclipse.org/kura/releases/<version>/kura_<version>_intel-up2-ubuntu-20_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: apt-get install./ kura_<version>_intel-up2-ubuntu-20_installer.deb Set the right Wi-Fi regulatory domain based on your current world region editing the /etc/default/crda and adding the ISO 3166-1 alpha-2 code of your region. Reboot the Intel Up\u00b2 with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with an untrusted certificate: Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"Eclipse Kura&trade; Installation"},{"location":"intro/nvidia-jetson-nano-quick-start/","text":"NVIDIA Jetson Nano\u2122 - Quick Start Overview This section provides Eclipse Kura\u2122 quick installation procedures for the NVIDIA Jetson Nano\u2122. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page . This quickstart has been tested using the following image: jetson-nano-jp46-sd-card-image.zip downloaded from https://developer.nvidia.com/jetson-nano-sd-card-image and with the image burned on a SD card with Etcher . The official images can be found on the Jetson Nano Developer Kit Getting Starteg Guide . Further information on the Ubuntu installation for the NVIDIA Jetson Nano\u2122 can be found here . Eclipse Kura\u2122 Installation To install Eclipse Kura with its dependencies on the NVIDIA Jetson Nano\u2122, perform the following steps: Boot the NVIDIA Jetson Nano\u2122 with the latest Jetson Nano Developer Kit SD Card image. Make sure your device is connected to internet. By default, eth0 lan network interface is configured in DHCP mode. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: wget http://download.eclipse.org/kura/releases/&lt;version&gt;/kura_&lt;version&gt;_nvidia-jetson-nano_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: sudo apt install ./kura_<version>_nvidia-jetson-nano_installer.deb All the required dependencies will be downloaded and installed. Reboot the NVIDIA Jetson Nano\u2122 with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with an untrusted certificate: Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"NVIDIA Jetson Nano&trade; - Quick Start"},{"location":"intro/nvidia-jetson-nano-quick-start/#nvidia-jetson-nano-quick-start","text":"","title":"NVIDIA Jetson Nano&trade; - Quick Start"},{"location":"intro/nvidia-jetson-nano-quick-start/#overview","text":"This section provides Eclipse Kura\u2122 quick installation procedures for the NVIDIA Jetson Nano\u2122. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page . This quickstart has been tested using the following image: jetson-nano-jp46-sd-card-image.zip downloaded from https://developer.nvidia.com/jetson-nano-sd-card-image and with the image burned on a SD card with Etcher . The official images can be found on the Jetson Nano Developer Kit Getting Starteg Guide . Further information on the Ubuntu installation for the NVIDIA Jetson Nano\u2122 can be found here .","title":"Overview"},{"location":"intro/nvidia-jetson-nano-quick-start/#eclipse-kura-installation","text":"To install Eclipse Kura with its dependencies on the NVIDIA Jetson Nano\u2122, perform the following steps: Boot the NVIDIA Jetson Nano\u2122 with the latest Jetson Nano Developer Kit SD Card image. Make sure your device is connected to internet. By default, eth0 lan network interface is configured in DHCP mode. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: wget http://download.eclipse.org/kura/releases/&lt;version&gt;/kura_&lt;version&gt;_nvidia-jetson-nano_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: sudo apt install ./kura_<version>_nvidia-jetson-nano_installer.deb All the required dependencies will be downloaded and installed. Reboot the NVIDIA Jetson Nano\u2122 with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with an untrusted certificate: Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"Eclipse Kura&trade; Installation"},{"location":"intro/raspberry-pi-raspbian-quick-start/","text":"Raspberry Pi - Raspbian Quick Start Overview This section provides Eclipse Kura\u2122 quick installation procedures for the Raspberry Pi and the Kura development environment. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page This quickstart has been tested using the following image: 2021-10-30-raspios-bullseye-armhf.zip downloaded from https://downloads.raspberrypi.org/raspios_armhf/images/raspios_armhf-2021-11-08/2021-10-30-raspios-bullseye-armhf.zip Enable SSH Access The ssh server is disabled by default on Raspbian images released after November 2016, in order to enable it to follow the instructions available at the following URL: https://www.raspberrypi.org/documentation/remote-access/ssh/ Eclipse Kura\u2122 Installation The last Raspbian Stretch adopts the new Consistent Network Device Naming . To correctly run Eclipse Kura on the Raspberry Pi, it should be disabled adding the net.ifnames=0 parameter at the end of the /boot/cmdline.txt file. To install Eclipse Kura with its dependencies on the Raspberry Pi, perform the following steps: Boot the Raspberry Pi with the latest Raspbian image (starting from release 5.1.0 Kura is tested with Raspbian 11). Make sure your device is connected to internet. By default, eth0 lan network interface is configured in DHCP mode. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: http://download.eclipse.org/kura/releases/&lt;version&gt;/kura_&lt;version&gt;_raspberry-pi_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: sudo apt-get install ./kura_<version>_raspberry-pi_installer.deb It could happen that wlan interface is \"soft blocked\" by default and needs to be enabled. To see if it is blocked run: rfkill list and unblock it with: sudo rfkill unblock wlan Set the right Wi-Fi regulatory domain based on your current world region following the instructions here . In case of problems, you could try to edit the /etc/default/crda adding the ISO 3166-1 alpha-2 code of your region Reboot the Raspberry Pi with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with an untrusted certificate: Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"Raspberry Pi - Raspbian Quick Start"},{"location":"intro/raspberry-pi-raspbian-quick-start/#raspberry-pi-raspbian-quick-start","text":"","title":"Raspberry Pi - Raspbian Quick Start"},{"location":"intro/raspberry-pi-raspbian-quick-start/#overview","text":"This section provides Eclipse Kura\u2122 quick installation procedures for the Raspberry Pi and the Kura development environment. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page This quickstart has been tested using the following image: 2021-10-30-raspios-bullseye-armhf.zip downloaded from https://downloads.raspberrypi.org/raspios_armhf/images/raspios_armhf-2021-11-08/2021-10-30-raspios-bullseye-armhf.zip","title":"Overview"},{"location":"intro/raspberry-pi-raspbian-quick-start/#enable-ssh-access","text":"The ssh server is disabled by default on Raspbian images released after November 2016, in order to enable it to follow the instructions available at the following URL: https://www.raspberrypi.org/documentation/remote-access/ssh/","title":"Enable SSH Access"},{"location":"intro/raspberry-pi-raspbian-quick-start/#eclipse-kura-installation","text":"The last Raspbian Stretch adopts the new Consistent Network Device Naming . To correctly run Eclipse Kura on the Raspberry Pi, it should be disabled adding the net.ifnames=0 parameter at the end of the /boot/cmdline.txt file. To install Eclipse Kura with its dependencies on the Raspberry Pi, perform the following steps: Boot the Raspberry Pi with the latest Raspbian image (starting from release 5.1.0 Kura is tested with Raspbian 11). Make sure your device is connected to internet. By default, eth0 lan network interface is configured in DHCP mode. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: http://download.eclipse.org/kura/releases/&lt;version&gt;/kura_&lt;version&gt;_raspberry-pi_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: sudo apt-get install ./kura_<version>_raspberry-pi_installer.deb It could happen that wlan interface is \"soft blocked\" by default and needs to be enabled. To see if it is blocked run: rfkill list and unblock it with: sudo rfkill unblock wlan Set the right Wi-Fi regulatory domain based on your current world region following the instructions here . In case of problems, you could try to edit the /etc/default/crda adding the ISO 3166-1 alpha-2 code of your region Reboot the Raspberry Pi with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with an untrusted certificate: Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"Eclipse Kura&trade; Installation"},{"location":"intro/raspberry-pi-ubuntu-20-quick-start/","text":"Raspberry Pi - Ubuntu 20 Quick Start Overview This section provides Eclipse Kura\u2122 quick installation procedures for the Raspberry Pi. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page . This quickstart has been tested using the Ubuntu 20.04.3 LTS Live Server for arm64 architecture flashed on the sd card through Raspberry Pi Imager . The official images can be also found on the Project Page . Further information on the Ubuntu installation for Raspberry Pi can be found here . Please note that, at the time of this writing, only 64 bit OS image is supported. Enable SSH Access On Ubuntu 20.04.3 the ssh access is enabled only for the standard ubuntu user. If you desire to remote login as root user, edit the file /etc/ssh/sshd_config (using the root permission) adding the line PermitRootLogin yes Eclipse Kura\u2122 Installation To install Eclipse Kura with its dependencies on the Raspberry Pi, perform the following steps: Boot the Raspberry Pi with the latest Ubuntu 20.04.3 LTS Server image. Make sure your device is connected to internet. By default, eth0 lan network interface is configured in DHCP mode. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: wget http://download.eclipse.org/kura/releases/&lt;version&gt;/kura_&lt;version&gt;_raspberry-pi-ubuntu-20_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: sudo apt install ./kura_<version>_raspberry-pi-ubuntu-20_installer.deb All the required dependencies will be downloaded and installed. Set the right Wi-Fi regulatory domain based on your current world region editing the /etc/default/crda and adding the ISO 3166-1 alpha-2 code of your region. Reboot the Raspberry Pi with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with a self signed certificate, select Accept the risk and continue : Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"Raspberry Pi - Ubuntu 20 Quick Start"},{"location":"intro/raspberry-pi-ubuntu-20-quick-start/#raspberry-pi-ubuntu-20-quick-start","text":"","title":"Raspberry Pi - Ubuntu 20 Quick Start"},{"location":"intro/raspberry-pi-ubuntu-20-quick-start/#overview","text":"This section provides Eclipse Kura\u2122 quick installation procedures for the Raspberry Pi. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page . This quickstart has been tested using the Ubuntu 20.04.3 LTS Live Server for arm64 architecture flashed on the sd card through Raspberry Pi Imager . The official images can be also found on the Project Page . Further information on the Ubuntu installation for Raspberry Pi can be found here . Please note that, at the time of this writing, only 64 bit OS image is supported.","title":"Overview"},{"location":"intro/raspberry-pi-ubuntu-20-quick-start/#enable-ssh-access","text":"On Ubuntu 20.04.3 the ssh access is enabled only for the standard ubuntu user. If you desire to remote login as root user, edit the file /etc/ssh/sshd_config (using the root permission) adding the line PermitRootLogin yes","title":"Enable SSH Access"},{"location":"intro/raspberry-pi-ubuntu-20-quick-start/#eclipse-kura-installation","text":"To install Eclipse Kura with its dependencies on the Raspberry Pi, perform the following steps: Boot the Raspberry Pi with the latest Ubuntu 20.04.3 LTS Server image. Make sure your device is connected to internet. By default, eth0 lan network interface is configured in DHCP mode. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: wget http://download.eclipse.org/kura/releases/&lt;version&gt;/kura_&lt;version&gt;_raspberry-pi-ubuntu-20_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: sudo apt install ./kura_<version>_raspberry-pi-ubuntu-20_installer.deb All the required dependencies will be downloaded and installed. Set the right Wi-Fi regulatory domain based on your current world region editing the /etc/default/crda and adding the ISO 3166-1 alpha-2 code of your region. Reboot the Raspberry Pi with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with a self signed certificate, select Accept the risk and continue : Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"Eclipse Kura&trade; Installation"}]}